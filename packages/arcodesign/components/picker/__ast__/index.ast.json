{
    "description": "选择器组件，形式是弹起的浮层。",
    "descriptionTags": {
        "en": "The selector component, in the form of a popup layer.",
        "type": "数据录入",
        "type_en": "Data Entry",
        "name": "选择器",
        "name_en": "Picker"
    },
    "displayName": "Picker",
    "methods": [
        {
            "description": "Returns the character at the specified index.",
            "docblock": "Returns the character at the specified index.\n@param pos The zero-based index of the desired character.",
            "descriptionTags": {
                "params": [
                    {
                        "name": "pos",
                        "description": "The zero-based index of the desired character.",
                        "type": "",
                        "optional": false
                    }
                ]
            },
            "modifiers": [],
            "name": "charAt",
            "params": [
                {
                    "description": "The zero-based index of the desired character.",
                    "name": "pos",
                    "type": {
                        "name": "number"
                    }
                }
            ],
            "returns": null
        },
        {
            "description": "Returns the Unicode value of the character at the specified location.",
            "docblock": "Returns the Unicode value of the character at the specified location.\n@param index The zero-based index of the desired character. If there is no character at the specified index, NaN is returned.",
            "descriptionTags": {
                "params": [
                    {
                        "name": "index",
                        "description": "The zero-based index of the desired character. If there is no character at the specified index, NaN is returned.",
                        "type": "",
                        "optional": false
                    }
                ]
            },
            "modifiers": [],
            "name": "charCodeAt",
            "params": [
                {
                    "description": "The zero-based index of the desired character. If there is no character at the specified index, NaN is returned.",
                    "name": "index",
                    "type": {
                        "name": "number"
                    }
                }
            ],
            "returns": null
        },
        {
            "description": "Returns a string that contains the concatenation of two or more strings.",
            "docblock": "Returns a string that contains the concatenation of two or more strings.\n@param strings The strings to append to the end of the string.",
            "descriptionTags": {
                "params": [
                    {
                        "name": "strings",
                        "description": "The strings to append to the end of the string.",
                        "type": "",
                        "optional": false
                    }
                ]
            },
            "modifiers": [],
            "name": "concat",
            "params": [
                {
                    "description": "The strings to append to the end of the string.",
                    "name": "strings",
                    "type": {
                        "name": "string[]"
                    }
                }
            ],
            "returns": null
        },
        {
            "description": "Returns the position of the first occurrence of a substring.",
            "docblock": "Returns the position of the first occurrence of a substring.\n@param searchString The substring to search for in the string\n@param position The index at which to begin searching the String object. If omitted, search starts at the beginning of the string.",
            "descriptionTags": {
                "params": [
                    {
                        "name": "searchString",
                        "description": "The substring to search for in the string",
                        "type": "",
                        "optional": false
                    },
                    {
                        "name": "position",
                        "description": "The index at which to begin searching the String object. If omitted, search starts at the beginning of the string.",
                        "type": "",
                        "optional": false
                    }
                ]
            },
            "modifiers": [],
            "name": "indexOf",
            "params": [
                {
                    "description": "The substring to search for in the string",
                    "name": "searchString",
                    "type": {
                        "name": "string"
                    }
                },
                {
                    "description": "The index at which to begin searching the String object. If omitted, search starts at the beginning of the string.",
                    "name": "position?",
                    "type": {
                        "name": "number"
                    }
                }
            ],
            "returns": null
        },
        {
            "description": "Returns the last occurrence of a substring in the string.",
            "docblock": "Returns the last occurrence of a substring in the string.\n@param searchString The substring to search for.\n@param position The index at which to begin searching. If omitted, the search begins at the end of the string.",
            "descriptionTags": {
                "params": [
                    {
                        "name": "searchString",
                        "description": "The substring to search for.",
                        "type": "",
                        "optional": false
                    },
                    {
                        "name": "position",
                        "description": "The index at which to begin searching. If omitted, the search begins at the end of the string.",
                        "type": "",
                        "optional": false
                    }
                ]
            },
            "modifiers": [],
            "name": "lastIndexOf",
            "params": [
                {
                    "description": "The substring to search for.",
                    "name": "searchString",
                    "type": {
                        "name": "string"
                    }
                },
                {
                    "description": "The index at which to begin searching. If omitted, the search begins at the end of the string.",
                    "name": "position?",
                    "type": {
                        "name": "number"
                    }
                }
            ],
            "returns": null
        },
        {
            "description": "Determines whether two strings are equivalent in the current locale.\nDetermines whether two strings are equivalent in the current or specified locale.",
            "docblock": "Determines whether two strings are equivalent in the current locale.\nDetermines whether two strings are equivalent in the current or specified locale.\n@param that String to compare to target string\n@param that String to compare to target string\n@param locales A locale string or array of locale strings that contain one or more language or locale tags. If you include more than one locale string, list them in descending order of priority so that the first entry is the preferred locale. If you omit this parameter, the default locale of the JavaScript runtime is used. This parameter must conform to BCP 47 standards; see the Intl.Collator object for details.\n@param options An object that contains one or more properties that specify comparison options. see the Intl.Collator object for details.",
            "descriptionTags": {
                "params": [
                    {
                        "name": "that",
                        "description": "String to compare to target string",
                        "type": "",
                        "optional": false
                    }
                ]
            },
            "modifiers": [],
            "name": "localeCompare",
            "params": [
                {
                    "description": "String to compare to target string",
                    "name": "that",
                    "type": {
                        "name": "string"
                    }
                }
            ],
            "returns": null
        },
        {
            "description": "Matches a string with a regular expression, and returns an array containing the results of that search.\nMatches a string or an object that supports being matched against, and returns an array\r\ncontaining the results of that search, or null if no matches are found.",
            "docblock": "Matches a string with a regular expression, and returns an array containing the results of that search.\nMatches a string or an object that supports being matched against, and returns an array\ncontaining the results of that search, or null if no matches are found.\n@param regexp A variable name or string literal containing the regular expression pattern and flags.\n@param matcher An object that supports being matched against.",
            "descriptionTags": {
                "params": [
                    {
                        "name": "regexp",
                        "description": "A variable name or string literal containing the regular expression pattern and flags.",
                        "type": "",
                        "optional": false
                    }
                ]
            },
            "modifiers": [],
            "name": "match",
            "params": [
                {
                    "description": "A variable name or string literal containing the regular expression pattern and flags.",
                    "name": "regexp",
                    "type": {
                        "name": "string | RegExp"
                    }
                }
            ],
            "returns": null
        },
        {
            "description": "Replaces text in a string, using a regular expression or search string.\nReplaces text in a string, using a regular expression or search string.\nReplaces text in a string, using an object that supports replacement within a string.\nReplaces text in a string, using an object that supports replacement within a string.",
            "docblock": "Replaces text in a string, using a regular expression or search string.\nReplaces text in a string, using a regular expression or search string.\nReplaces text in a string, using an object that supports replacement within a string.\nReplaces text in a string, using an object that supports replacement within a string.\n@param searchValue A string to search for.\n@param replaceValue A string containing the text to replace for every successful match of searchValue in this string.\n@param searchValue A string to search for.\n@param replacer A function that returns the replacement text.\n@param searchValue A object can search for and replace matches within a string.\n@param replaceValue A string containing the text to replace for every successful match of searchValue in this string.\n@param searchValue A object can search for and replace matches within a string.\n@param replacer A function that returns the replacement text.",
            "descriptionTags": {
                "params": [
                    {
                        "name": "searchValue",
                        "description": "A string to search for.",
                        "type": "",
                        "optional": false
                    },
                    {
                        "name": "replaceValue",
                        "description": "A string containing the text to replace for every successful match of searchValue in this string.",
                        "type": "",
                        "optional": false
                    }
                ]
            },
            "modifiers": [],
            "name": "replace",
            "params": [
                {
                    "description": "A string to search for.",
                    "name": "searchValue",
                    "type": {
                        "name": "string | RegExp"
                    }
                },
                {
                    "description": "A string containing the text to replace for every successful match of searchValue in this string.",
                    "name": "replaceValue",
                    "type": {
                        "name": "string"
                    }
                }
            ],
            "returns": null
        },
        {
            "description": "Finds the first substring match in a regular expression search.\nFinds the first substring match in a regular expression search.",
            "docblock": "Finds the first substring match in a regular expression search.\nFinds the first substring match in a regular expression search.\n@param regexp The regular expression pattern and applicable flags.\n@param searcher An object which supports searching within a string.",
            "descriptionTags": {
                "params": [
                    {
                        "name": "regexp",
                        "description": "The regular expression pattern and applicable flags.",
                        "type": "",
                        "optional": false
                    }
                ]
            },
            "modifiers": [],
            "name": "search",
            "params": [
                {
                    "description": "The regular expression pattern and applicable flags.",
                    "name": "regexp",
                    "type": {
                        "name": "string | RegExp"
                    }
                }
            ],
            "returns": null
        },
        {
            "description": "Returns a section of a string.",
            "docblock": "Returns a section of a string.\n@param start The index to the beginning of the specified portion of stringObj.\n@param end The index to the end of the specified portion of stringObj. The substring includes the characters up to, but not including, the character indicated by end.\rIf this value is not specified, the substring continues to the end of stringObj.",
            "descriptionTags": {
                "params": [
                    {
                        "name": "start",
                        "description": "The index to the beginning of the specified portion of stringObj.",
                        "type": "",
                        "optional": false
                    },
                    {
                        "name": "end",
                        "description": "The index to the end of the specified portion of stringObj. The substring includes the characters up to, but not including, the character indicated by end. If this value is not specified, the substring continues to the end of stringObj.",
                        "type": "",
                        "optional": false
                    }
                ]
            },
            "modifiers": [],
            "name": "slice",
            "params": [
                {
                    "description": "The index to the beginning of the specified portion of stringObj.",
                    "name": "start?",
                    "type": {
                        "name": "number"
                    }
                },
                {
                    "description": "The index to the end of the specified portion of stringObj. The substring includes the characters up to, but not including, the character indicated by end.\rIf this value is not specified, the substring continues to the end of stringObj.",
                    "name": "end?",
                    "type": {
                        "name": "number"
                    }
                }
            ],
            "returns": null
        },
        {
            "description": "Split a string into substrings using the specified separator and return them as an array.\nSplit a string into substrings using the specified separator and return them as an array.",
            "docblock": "Split a string into substrings using the specified separator and return them as an array.\nSplit a string into substrings using the specified separator and return them as an array.\n@param separator A string that identifies character or characters to use in separating the string. If omitted, a single-element array containing the entire string is returned.\n@param limit A value used to limit the number of elements returned in the array.\n@param splitter An object that can split a string.\n@param limit A value used to limit the number of elements returned in the array.",
            "descriptionTags": {
                "params": [
                    {
                        "name": "separator",
                        "description": "A string that identifies character or characters to use in separating the string. If omitted, a single-element array containing the entire string is returned.",
                        "type": "",
                        "optional": false
                    },
                    {
                        "name": "limit",
                        "description": "A value used to limit the number of elements returned in the array.",
                        "type": "",
                        "optional": false
                    }
                ]
            },
            "modifiers": [],
            "name": "split",
            "params": [
                {
                    "description": "A string that identifies character or characters to use in separating the string. If omitted, a single-element array containing the entire string is returned.",
                    "name": "separator",
                    "type": {
                        "name": "string | RegExp"
                    }
                },
                {
                    "description": "A value used to limit the number of elements returned in the array.",
                    "name": "limit?",
                    "type": {
                        "name": "number"
                    }
                }
            ],
            "returns": null
        },
        {
            "description": "Returns the substring at the specified location within a String object.",
            "docblock": "Returns the substring at the specified location within a String object.\n@param start The zero-based index number indicating the beginning of the substring.\n@param end Zero-based index number indicating the end of the substring. The substring includes the characters up to, but not including, the character indicated by end.\rIf end is omitted, the characters from start through the end of the original string are returned.",
            "descriptionTags": {
                "params": [
                    {
                        "name": "start",
                        "description": "The zero-based index number indicating the beginning of the substring.",
                        "type": "",
                        "optional": false
                    },
                    {
                        "name": "end",
                        "description": "Zero-based index number indicating the end of the substring. The substring includes the characters up to, but not including, the character indicated by end. If end is omitted, the characters from start through the end of the original string are returned.",
                        "type": "",
                        "optional": false
                    }
                ]
            },
            "modifiers": [],
            "name": "substring",
            "params": [
                {
                    "description": "The zero-based index number indicating the beginning of the substring.",
                    "name": "start",
                    "type": {
                        "name": "number"
                    }
                },
                {
                    "description": "Zero-based index number indicating the end of the substring. The substring includes the characters up to, but not including, the character indicated by end.\rIf end is omitted, the characters from start through the end of the original string are returned.",
                    "name": "end?",
                    "type": {
                        "name": "number"
                    }
                }
            ],
            "returns": null
        },
        {
            "description": "Converts all the alphabetic characters in a string to lowercase.",
            "docblock": "Converts all the alphabetic characters in a string to lowercase.",
            "descriptionTags": {},
            "modifiers": [],
            "name": "toLowerCase",
            "params": [],
            "returns": null
        },
        {
            "description": "Converts all alphabetic characters to lowercase, taking into account the host environment's current locale.",
            "docblock": "Converts all alphabetic characters to lowercase, taking into account the host environment's current locale.",
            "descriptionTags": {},
            "modifiers": [],
            "name": "toLocaleLowerCase",
            "params": [
                {
                    "description": null,
                    "name": "locales?",
                    "type": {
                        "name": "string | string[]"
                    }
                }
            ],
            "returns": null
        },
        {
            "description": "Converts all the alphabetic characters in a string to uppercase.",
            "docblock": "Converts all the alphabetic characters in a string to uppercase.",
            "descriptionTags": {},
            "modifiers": [],
            "name": "toUpperCase",
            "params": [],
            "returns": null
        },
        {
            "description": "Returns a string where all alphabetic characters have been converted to uppercase, taking into account the host environment's current locale.",
            "docblock": "Returns a string where all alphabetic characters have been converted to uppercase, taking into account the host environment's current locale.",
            "descriptionTags": {},
            "modifiers": [],
            "name": "toLocaleUpperCase",
            "params": [
                {
                    "description": null,
                    "name": "locales?",
                    "type": {
                        "name": "string | string[]"
                    }
                }
            ],
            "returns": null
        },
        {
            "description": "Removes the leading and trailing white space and line terminator characters from a string.",
            "docblock": "Removes the leading and trailing white space and line terminator characters from a string.",
            "descriptionTags": {},
            "modifiers": [],
            "name": "trim",
            "params": [],
            "returns": null
        },
        {
            "description": "Gets a substring beginning at the specified location and having the specified length.",
            "docblock": "Gets a substring beginning at the specified location and having the specified length.\n@param from The starting position of the desired substring. The index of the first character in the string is zero.\n@param length The number of characters to include in the returned substring.",
            "descriptionTags": {
                "params": [
                    {
                        "name": "from",
                        "description": "The starting position of the desired substring. The index of the first character in the string is zero.",
                        "type": "",
                        "optional": false
                    },
                    {
                        "name": "length",
                        "description": "The number of characters to include in the returned substring.",
                        "type": "",
                        "optional": false
                    }
                ]
            },
            "modifiers": [],
            "name": "substr",
            "params": [
                {
                    "description": "The starting position of the desired substring. The index of the first character in the string is zero.",
                    "name": "from",
                    "type": {
                        "name": "number"
                    }
                },
                {
                    "description": "The number of characters to include in the returned substring.",
                    "name": "length?",
                    "type": {
                        "name": "number"
                    }
                }
            ],
            "returns": null
        },
        {
            "description": "Returns a nonnegative integer Number less than 1114112 (0x110000) that is the code point\r\nvalue of the UTF-16 encoded code point starting at the string element at position pos in\r\nthe String resulting from converting this object to a String.\r\nIf there is no element at that position, the result is undefined.\r\nIf a valid UTF-16 surrogate pair does not begin at pos, the result is the code unit at pos.",
            "docblock": "Returns a nonnegative integer Number less than 1114112 (0x110000) that is the code point\nvalue of the UTF-16 encoded code point starting at the string element at position pos in\r\nthe String resulting from converting this object to a String.\r\nIf there is no element at that position, the result is undefined.\r\nIf a valid UTF-16 surrogate pair does not begin at pos, the result is the code unit at pos.",
            "descriptionTags": {},
            "modifiers": [],
            "name": "codePointAt",
            "params": [
                {
                    "description": null,
                    "name": "pos",
                    "type": {
                        "name": "number"
                    }
                }
            ],
            "returns": null
        },
        {
            "description": "Returns true if searchString appears as a substring of the result of converting this\r\nobject to a String, at one or more positions that are\r\ngreater than or equal to position; otherwise, returns false.",
            "docblock": "Returns true if searchString appears as a substring of the result of converting this\nobject to a String, at one or more positions that are\r\ngreater than or equal to position; otherwise, returns false.\n@param searchString search string\n@param position If position is undefined, 0 is assumed, so as to search all of the String.",
            "descriptionTags": {
                "params": [
                    {
                        "name": "searchString",
                        "description": "search string",
                        "type": "",
                        "optional": false
                    },
                    {
                        "name": "position",
                        "description": "If position is undefined, 0 is assumed, so as to search all of the String.",
                        "type": "",
                        "optional": false
                    }
                ]
            },
            "modifiers": [],
            "name": "includes",
            "params": [
                {
                    "description": "search string",
                    "name": "searchString",
                    "type": {
                        "name": "string"
                    }
                },
                {
                    "description": "If position is undefined, 0 is assumed, so as to search all of the String.",
                    "name": "position?",
                    "type": {
                        "name": "number"
                    }
                }
            ],
            "returns": null
        },
        {
            "description": "Returns true if the sequence of elements of searchString converted to a String is the\r\nsame as the corresponding elements of this object (converted to a String) starting at\r\nendPosition – length(this). Otherwise returns false.",
            "docblock": "Returns true if the sequence of elements of searchString converted to a String is the\nsame as the corresponding elements of this object (converted to a String) starting at\r\nendPosition – length(this). Otherwise returns false.",
            "descriptionTags": {},
            "modifiers": [],
            "name": "endsWith",
            "params": [
                {
                    "description": null,
                    "name": "searchString",
                    "type": {
                        "name": "string"
                    }
                },
                {
                    "description": null,
                    "name": "endPosition?",
                    "type": {
                        "name": "number"
                    }
                }
            ],
            "returns": null
        },
        {
            "description": "Returns the String value result of normalizing the string into the normalization form\r\nnamed by form as specified in Unicode Standard Annex #15, Unicode Normalization Forms.\nReturns the String value result of normalizing the string into the normalization form\r\nnamed by form as specified in Unicode Standard Annex #15, Unicode Normalization Forms.",
            "docblock": "Returns the String value result of normalizing the string into the normalization form\nnamed by form as specified in Unicode Standard Annex #15, Unicode Normalization Forms.\nReturns the String value result of normalizing the string into the normalization form\r\nnamed by form as specified in Unicode Standard Annex #15, Unicode Normalization Forms.\n@param form Applicable values: \"NFC\", \"NFD\", \"NFKC\", or \"NFKD\", If not specified default\ris \"NFC\"\n@param form Applicable values: \"NFC\", \"NFD\", \"NFKC\", or \"NFKD\", If not specified default\ris \"NFC\"",
            "descriptionTags": {
                "params": [
                    {
                        "name": "form",
                        "description": "Applicable values: \"NFC\", \"NFD\", \"NFKC\", or \"NFKD\", If not specified default is \"NFC\"",
                        "type": "",
                        "optional": false
                    }
                ]
            },
            "modifiers": [],
            "name": "normalize",
            "params": [
                {
                    "description": "Applicable values: \"NFC\", \"NFD\", \"NFKC\", or \"NFKD\", If not specified default\ris \"NFC\"",
                    "name": "form",
                    "type": {
                        "name": "\"NFC\" | \"NFD\" | \"NFKC\" | \"NFKD\""
                    }
                }
            ],
            "returns": null
        },
        {
            "description": "Returns a String value that is made from count copies appended together. If count is 0,\r\nthe empty string is returned.",
            "docblock": "Returns a String value that is made from count copies appended together. If count is 0,\nthe empty string is returned.\n@param count number of copies to append",
            "descriptionTags": {
                "params": [
                    {
                        "name": "count",
                        "description": "number of copies to append",
                        "type": "",
                        "optional": false
                    }
                ]
            },
            "modifiers": [],
            "name": "repeat",
            "params": [
                {
                    "description": "number of copies to append",
                    "name": "count",
                    "type": {
                        "name": "number"
                    }
                }
            ],
            "returns": null
        },
        {
            "description": "Returns true if the sequence of elements of searchString converted to a String is the\r\nsame as the corresponding elements of this object (converted to a String) starting at\r\nposition. Otherwise returns false.",
            "docblock": "Returns true if the sequence of elements of searchString converted to a String is the\nsame as the corresponding elements of this object (converted to a String) starting at\r\nposition. Otherwise returns false.",
            "descriptionTags": {},
            "modifiers": [],
            "name": "startsWith",
            "params": [
                {
                    "description": null,
                    "name": "searchString",
                    "type": {
                        "name": "string"
                    }
                },
                {
                    "description": null,
                    "name": "position?",
                    "type": {
                        "name": "number"
                    }
                }
            ],
            "returns": null
        },
        {
            "description": "Returns an <a> HTML anchor element and sets the name attribute to the text value",
            "docblock": "Returns an <a> HTML anchor element and sets the name attribute to the text value\n@param name",
            "descriptionTags": {
                "params": [
                    {
                        "name": "name",
                        "description": "",
                        "type": "",
                        "optional": false
                    }
                ]
            },
            "modifiers": [],
            "name": "anchor",
            "params": [
                {
                    "description": null,
                    "name": "name",
                    "type": {
                        "name": "string"
                    }
                }
            ],
            "returns": null
        },
        {
            "description": "Returns a <big> HTML element",
            "docblock": "Returns a <big> HTML element",
            "descriptionTags": {},
            "modifiers": [],
            "name": "big",
            "params": [],
            "returns": null
        },
        {
            "description": "Returns a <blink> HTML element",
            "docblock": "Returns a <blink> HTML element",
            "descriptionTags": {},
            "modifiers": [],
            "name": "blink",
            "params": [],
            "returns": null
        },
        {
            "description": "Returns a <b> HTML element",
            "docblock": "Returns a <b> HTML element",
            "descriptionTags": {},
            "modifiers": [],
            "name": "bold",
            "params": [],
            "returns": null
        },
        {
            "description": "Returns a <tt> HTML element",
            "docblock": "Returns a <tt> HTML element",
            "descriptionTags": {},
            "modifiers": [],
            "name": "fixed",
            "params": [],
            "returns": null
        },
        {
            "description": "Returns a <font> HTML element and sets the color attribute value",
            "docblock": "Returns a <font> HTML element and sets the color attribute value",
            "descriptionTags": {},
            "modifiers": [],
            "name": "fontcolor",
            "params": [
                {
                    "description": null,
                    "name": "color",
                    "type": {
                        "name": "string"
                    }
                }
            ],
            "returns": null
        },
        {
            "description": "Returns a <font> HTML element and sets the size attribute value\nReturns a <font> HTML element and sets the size attribute value",
            "docblock": "Returns a <font> HTML element and sets the size attribute value\nReturns a <font> HTML element and sets the size attribute value",
            "descriptionTags": {},
            "modifiers": [],
            "name": "fontsize",
            "params": [
                {
                    "description": null,
                    "name": "size",
                    "type": {
                        "name": "number"
                    }
                }
            ],
            "returns": null
        },
        {
            "description": "Returns an <i> HTML element",
            "docblock": "Returns an <i> HTML element",
            "descriptionTags": {},
            "modifiers": [],
            "name": "italics",
            "params": [],
            "returns": null
        },
        {
            "description": "Returns an <a> HTML element and sets the href attribute value",
            "docblock": "Returns an <a> HTML element and sets the href attribute value",
            "descriptionTags": {},
            "modifiers": [],
            "name": "link",
            "params": [
                {
                    "description": null,
                    "name": "url",
                    "type": {
                        "name": "string"
                    }
                }
            ],
            "returns": null
        },
        {
            "description": "Returns a <small> HTML element",
            "docblock": "Returns a <small> HTML element",
            "descriptionTags": {},
            "modifiers": [],
            "name": "small",
            "params": [],
            "returns": null
        },
        {
            "description": "Returns a <strike> HTML element",
            "docblock": "Returns a <strike> HTML element",
            "descriptionTags": {},
            "modifiers": [],
            "name": "strike",
            "params": [],
            "returns": null
        },
        {
            "description": "Returns a <sub> HTML element",
            "docblock": "Returns a <sub> HTML element",
            "descriptionTags": {},
            "modifiers": [],
            "name": "sub",
            "params": [],
            "returns": null
        },
        {
            "description": "Returns a <sup> HTML element",
            "docblock": "Returns a <sup> HTML element",
            "descriptionTags": {},
            "modifiers": [],
            "name": "sup",
            "params": [],
            "returns": null
        },
        {
            "description": "Iterator",
            "docblock": "Iterator",
            "descriptionTags": {},
            "modifiers": [],
            "name": "__@iterator",
            "params": [],
            "returns": null
        },
        {
            "description": "Pads the current string with a given string (possibly repeated) so that the resulting string reaches a given length.\r\nThe padding is applied from the start (left) of the current string.",
            "docblock": "Pads the current string with a given string (possibly repeated) so that the resulting string reaches a given length.\nThe padding is applied from the start (left) of the current string.\n@param maxLength The length of the resulting string once the current string has been padded.\rIf this parameter is smaller than the current string's length, the current string will be returned as it is.\n@param fillString The string to pad the current string with.\rIf this string is too long, it will be truncated and the left-most part will be applied.\rThe default value for this parameter is \" \" (U+0020).",
            "descriptionTags": {
                "params": [
                    {
                        "name": "maxLength",
                        "description": "The length of the resulting string once the current string has been padded. If this parameter is smaller than the current string's length, the current string will be returned as it is.",
                        "type": "",
                        "optional": false
                    },
                    {
                        "name": "fillString",
                        "description": "The string to pad the current string with. If this string is too long, it will be truncated and the left-most part will be applied. The default value for this parameter is \" \" (U+0020).",
                        "type": "",
                        "optional": false
                    }
                ]
            },
            "modifiers": [],
            "name": "padStart",
            "params": [
                {
                    "description": "The length of the resulting string once the current string has been padded.\rIf this parameter is smaller than the current string's length, the current string will be returned as it is.",
                    "name": "maxLength",
                    "type": {
                        "name": "number"
                    }
                },
                {
                    "description": "The string to pad the current string with.\rIf this string is too long, it will be truncated and the left-most part will be applied.\rThe default value for this parameter is \" \" (U+0020).",
                    "name": "fillString?",
                    "type": {
                        "name": "string"
                    }
                }
            ],
            "returns": null
        },
        {
            "description": "Pads the current string with a given string (possibly repeated) so that the resulting string reaches a given length.\r\nThe padding is applied from the end (right) of the current string.",
            "docblock": "Pads the current string with a given string (possibly repeated) so that the resulting string reaches a given length.\nThe padding is applied from the end (right) of the current string.\n@param maxLength The length of the resulting string once the current string has been padded.\rIf this parameter is smaller than the current string's length, the current string will be returned as it is.\n@param fillString The string to pad the current string with.\rIf this string is too long, it will be truncated and the left-most part will be applied.\rThe default value for this parameter is \" \" (U+0020).",
            "descriptionTags": {
                "params": [
                    {
                        "name": "maxLength",
                        "description": "The length of the resulting string once the current string has been padded. If this parameter is smaller than the current string's length, the current string will be returned as it is.",
                        "type": "",
                        "optional": false
                    },
                    {
                        "name": "fillString",
                        "description": "The string to pad the current string with. If this string is too long, it will be truncated and the left-most part will be applied. The default value for this parameter is \" \" (U+0020).",
                        "type": "",
                        "optional": false
                    }
                ]
            },
            "modifiers": [],
            "name": "padEnd",
            "params": [
                {
                    "description": "The length of the resulting string once the current string has been padded.\rIf this parameter is smaller than the current string's length, the current string will be returned as it is.",
                    "name": "maxLength",
                    "type": {
                        "name": "number"
                    }
                },
                {
                    "description": "The string to pad the current string with.\rIf this string is too long, it will be truncated and the left-most part will be applied.\rThe default value for this parameter is \" \" (U+0020).",
                    "name": "fillString?",
                    "type": {
                        "name": "string"
                    }
                }
            ],
            "returns": null
        },
        {
            "description": "Removes the trailing white space and line terminator characters from a string.",
            "docblock": "Removes the trailing white space and line terminator characters from a string.",
            "descriptionTags": {},
            "modifiers": [],
            "name": "trimEnd",
            "params": [],
            "returns": null
        },
        {
            "description": "Removes the leading white space and line terminator characters from a string.",
            "docblock": "Removes the leading white space and line terminator characters from a string.",
            "descriptionTags": {},
            "modifiers": [],
            "name": "trimStart",
            "params": [],
            "returns": null
        },
        {
            "description": "Removes the leading white space and line terminator characters from a string.",
            "docblock": "Removes the leading white space and line terminator characters from a string.",
            "descriptionTags": {},
            "modifiers": [],
            "name": "trimLeft",
            "params": [],
            "returns": null
        },
        {
            "description": "Removes the trailing white space and line terminator characters from a string.",
            "docblock": "Removes the trailing white space and line terminator characters from a string.",
            "descriptionTags": {},
            "modifiers": [],
            "name": "trimRight",
            "params": [],
            "returns": null
        },
        {
            "description": "Matches a string with a regular expression, and returns an iterable of matches\r\ncontaining the results of that search.",
            "docblock": "Matches a string with a regular expression, and returns an iterable of matches\ncontaining the results of that search.\n@param regexp A variable name or string literal containing the regular expression pattern and flags.",
            "descriptionTags": {
                "params": [
                    {
                        "name": "regexp",
                        "description": "A variable name or string literal containing the regular expression pattern and flags.",
                        "type": "",
                        "optional": false
                    }
                ]
            },
            "modifiers": [],
            "name": "matchAll",
            "params": [
                {
                    "description": "A variable name or string literal containing the regular expression pattern and flags.",
                    "name": "regexp",
                    "type": {
                        "name": "RegExp"
                    }
                }
            ],
            "returns": null
        },
        {
            "description": "Replace all instances of a substring in a string, using a regular expression or search string.\nReplace all instances of a substring in a string, using a regular expression or search string.",
            "docblock": "Replace all instances of a substring in a string, using a regular expression or search string.\nReplace all instances of a substring in a string, using a regular expression or search string.\n@param searchValue A string to search for.\n@param replaceValue A string containing the text to replace for every successful match of searchValue in this string.\n@param searchValue A string to search for.\n@param replacer A function that returns the replacement text.",
            "descriptionTags": {
                "params": [
                    {
                        "name": "searchValue",
                        "description": "A string to search for.",
                        "type": "",
                        "optional": false
                    },
                    {
                        "name": "replaceValue",
                        "description": "A string containing the text to replace for every successful match of searchValue in this string.",
                        "type": "",
                        "optional": false
                    }
                ]
            },
            "modifiers": [],
            "name": "replaceAll",
            "params": [
                {
                    "description": "A string to search for.",
                    "name": "searchValue",
                    "type": {
                        "name": "string | RegExp"
                    }
                },
                {
                    "description": "A string containing the text to replace for every successful match of searchValue in this string.",
                    "name": "replaceValue",
                    "type": {
                        "name": "string"
                    }
                }
            ],
            "returns": null
        },
        {
            "description": "Takes an integer value and returns the item at that index,\nallowing for positive and negative integers.\nNegative integers count back from the last item in the array.",
            "docblock": "Takes an integer value and returns the item at that index,\nallowing for positive and negative integers.\nNegative integers count back from the last item in the array.",
            "descriptionTags": {},
            "modifiers": [],
            "name": "at",
            "params": [
                {
                    "description": null,
                    "name": "index",
                    "type": {
                        "name": "number"
                    }
                }
            ],
            "returns": null
        }
    ],
    "props": {
        "data": {
            "defaultValue": null,
            "description": "数据源，非级联时data数组的长度决定picker列数，级联时以cols决定 pick列数\n@en Data source, the length of the data list determines the number of picker columns when not cascading, and is determined by cols when cascading",
            "name": "data",
            "tags": {
                "en": "Data source, the length of the data list determines the number of picker columns when not cascading, and is determined by cols when cascading"
            },
            "descWithTags": "数据源，非级联时data数组的长度决定picker列数，级联时以cols决定 pick列数",
            "parent": {
                "fileName": "arcom-github/packages/arcodesign/components/picker/type.ts",
                "name": "PickerProps"
            },
            "required": true,
            "type": {
                "name": "PickerData[] | PickerData[][] | ValueType[][]"
            }
        },
        "cascade": {
            "defaultValue": {
                "value": "true"
            },
            "description": "是否联动\n@en Whether to cascade",
            "name": "cascade",
            "tags": {
                "en": "Whether to cascade",
                "default": "true"
            },
            "descWithTags": "是否联动",
            "parent": {
                "fileName": "arcom-github/packages/arcodesign/components/picker/type.ts",
                "name": "PickerProps"
            },
            "required": false,
            "type": {
                "name": "boolean"
            }
        },
        "cols": {
            "defaultValue": {
                "value": "3"
            },
            "description": "列数(最大为5；cascade=true时才使用)\n@en Number of columns (maximum 5; only used when cascade=true)",
            "name": "cols",
            "tags": {
                "en": "Number of columns (maximum 5; only used when cascade=true)",
                "default": "3"
            },
            "descWithTags": "列数(最大为5；cascade=true时才使用)",
            "parent": {
                "fileName": "arcom-github/packages/arcodesign/components/picker/type.ts",
                "name": "PickerProps"
            },
            "required": false,
            "type": {
                "name": "number"
            }
        },
        "rows": {
            "defaultValue": {
                "value": "5"
            },
            "description": "行数(一列可选项的行数)，必须是奇数，最小为3个\n@en The number of rows (the number of rows in a column of optional items), must be an odd number, the minimum is 3",
            "name": "rows",
            "tags": {
                "en": "The number of rows (the number of rows in a column of optional items), must be an odd number, the minimum is 3",
                "default": "5"
            },
            "descWithTags": "行数(一列可选项的行数)，必须是奇数，最小为3个",
            "parent": {
                "fileName": "arcom-github/packages/arcodesign/components/picker/type.ts",
                "name": "PickerProps"
            },
            "required": false,
            "type": {
                "name": "number"
            }
        },
        "disabled": {
            "defaultValue": {
                "value": "false"
            },
            "description": "是否不可用\n@en Whether t be disabled",
            "name": "disabled",
            "tags": {
                "en": "Whether t be disabled",
                "default": "false"
            },
            "descWithTags": "是否不可用",
            "parent": {
                "fileName": "arcom-github/packages/arcodesign/components/picker/type.ts",
                "name": "PickerProps"
            },
            "required": false,
            "type": {
                "name": "boolean"
            }
        },
        "value": {
            "defaultValue": null,
            "description": "值, 格式是[value1, value2, value3], 对应数据源的相应级层value，如果不传默认选每一列的第一个值\n@en Value, the format is [value1, value2, value3], corresponding to the corresponding level value of the data source, if not passed, the first value of each column is selected by default",
            "name": "value",
            "tags": {
                "en": "Value, the format is [value1, value2, value3], corresponding to the corresponding level value of the data source, if not passed, the first value of each column is selected by default"
            },
            "descWithTags": "值, 格式是[value1, value2, value3], 对应数据源的相应级层value，如果不传默认选每一列的第一个值",
            "parent": {
                "fileName": "arcom-github/packages/arcodesign/components/picker/type.ts",
                "name": "PickerProps"
            },
            "required": false,
            "type": {
                "name": "ValueType[]"
            }
        },
        "onHide": {
            "defaultValue": null,
            "description": "点击遮罩层或取消、确定按钮的隐藏回调\n@en Callback for clicking on mask layer or cancel button, OK button",
            "name": "onHide",
            "tags": {
                "en": "Callback for clicking on mask layer or cancel button, OK button"
            },
            "descWithTags": "点击遮罩层或取消、确定按钮的隐藏回调",
            "parent": {
                "fileName": "arcom-github/packages/arcodesign/components/picker/type.ts",
                "name": "PickerProps"
            },
            "required": false,
            "type": {
                "name": "(scene?: string) => void"
            }
        },
        "onChange": {
            "defaultValue": null,
            "description": "选中后的回调\n@en Callback after selection",
            "name": "onChange",
            "tags": {
                "en": "Callback after selection"
            },
            "descWithTags": "选中后的回调",
            "parent": {
                "fileName": "arcom-github/packages/arcodesign/components/picker/type.ts",
                "name": "PickerProps"
            },
            "required": false,
            "type": {
                "name": "(selectedValue: ValueType[]) => void"
            }
        },
        "onPickerChange": {
            "defaultValue": null,
            "description": "每列数据选择变化后的回调函数\n@en The callback after each column data selection changes",
            "name": "onPickerChange",
            "tags": {
                "en": "The callback after each column data selection changes"
            },
            "descWithTags": "每列数据选择变化后的回调函数",
            "parent": {
                "fileName": "arcom-github/packages/arcodesign/components/picker/type.ts",
                "name": "PickerProps"
            },
            "required": false,
            "type": {
                "name": "(value: ValueType[], index: number) => void"
            }
        },
        "itemStyle": {
            "defaultValue": null,
            "description": "每列样式\n@en Stylesheet per column",
            "name": "itemStyle",
            "tags": {
                "en": "Stylesheet per column"
            },
            "descWithTags": "每列样式",
            "parent": {
                "fileName": "arcom-github/packages/arcodesign/components/picker/type.ts",
                "name": "PickerProps"
            },
            "required": false,
            "type": {
                "name": "CSSProperties"
            }
        },
        "visible": {
            "defaultValue": {
                "value": "false"
            },
            "description": "是否展示选择器\n@en whether to show the picker",
            "name": "visible",
            "tags": {
                "en": "whether to show the picker",
                "default": "false"
            },
            "descWithTags": "是否展示选择器",
            "parent": {
                "fileName": "arcom-github/packages/arcodesign/components/picker/type.ts",
                "name": "PickerProps"
            },
            "required": false,
            "type": {
                "name": "boolean"
            }
        },
        "okText": {
            "defaultValue": {
                "value": "\"确定\""
            },
            "description": "弹窗确认已选值的文案\n@en Text of confirmed selected value of the popup\n@default_en \"OK\"",
            "name": "okText",
            "tags": {
                "en": "Text of confirmed selected value of the popup",
                "default": "\"确定\"",
                "default_en": "\"OK\""
            },
            "descWithTags": "弹窗确认已选值的文案",
            "parent": {
                "fileName": "arcom-github/packages/arcodesign/components/picker/type.ts",
                "name": "PickerProps"
            },
            "required": false,
            "type": {
                "name": "string"
            }
        },
        "dismissText": {
            "defaultValue": {
                "value": "\"取消\""
            },
            "description": "弹窗取消的文案\n@en Popup canceled text\n@default_en \"Cancel\"",
            "name": "dismissText",
            "tags": {
                "en": "Popup canceled text",
                "default": "\"取消\"",
                "default_en": "\"Cancel\""
            },
            "descWithTags": "弹窗取消的文案",
            "parent": {
                "fileName": "arcom-github/packages/arcodesign/components/picker/type.ts",
                "name": "PickerProps"
            },
            "required": false,
            "type": {
                "name": "string"
            }
        },
        "onOk": {
            "defaultValue": null,
            "description": "点击选中时执行的回调\n@en Callback when clicking on Ok",
            "name": "onOk",
            "tags": {
                "en": "Callback when clicking on Ok"
            },
            "descWithTags": "点击选中时执行的回调",
            "parent": {
                "fileName": "arcom-github/packages/arcodesign/components/picker/type.ts",
                "name": "PickerProps"
            },
            "required": false,
            "type": {
                "name": "(value: ValueType[]) => void"
            }
        },
        "onDismiss": {
            "defaultValue": null,
            "description": "点击取消时执行的回调\n@en Callback when clicking to cancel",
            "name": "onDismiss",
            "tags": {
                "en": "Callback when clicking to cancel"
            },
            "descWithTags": "点击取消时执行的回调",
            "parent": {
                "fileName": "arcom-github/packages/arcodesign/components/picker/type.ts",
                "name": "PickerProps"
            },
            "required": false,
            "type": {
                "name": "() => void"
            }
        },
        "clickable": {
            "defaultValue": {
                "value": "true"
            },
            "description": "是否可通过点击操作选择内容\n@en Whether content can be selected by clicking",
            "name": "clickable",
            "tags": {
                "en": "Whether content can be selected by clicking",
                "default": "true"
            },
            "descWithTags": "是否可通过点击操作选择内容",
            "parent": {
                "fileName": "arcom-github/packages/arcodesign/components/picker/type.ts",
                "name": "PickerProps"
            },
            "required": false,
            "type": {
                "name": "boolean"
            }
        },
        "hideEmptyCols": {
            "defaultValue": {
                "value": "false"
            },
            "description": "是否隐藏无数据的空列，常用于级联选择\n@en Whether to hide empty columns without data, often used for cascading selection",
            "name": "hideEmptyCols",
            "tags": {
                "en": "Whether to hide empty columns without data, often used for cascading selection",
                "default": "false"
            },
            "descWithTags": "是否隐藏无数据的空列，常用于级联选择",
            "parent": {
                "fileName": "arcom-github/packages/arcodesign/components/picker/type.ts",
                "name": "PickerProps"
            },
            "required": false,
            "type": {
                "name": "boolean"
            }
        },
        "title": {
            "defaultValue": {
                "value": "\"\""
            },
            "description": "选择器标题\n@en Picker title",
            "name": "title",
            "tags": {
                "en": "Picker title",
                "default": "\"\""
            },
            "descWithTags": "选择器标题",
            "parent": {
                "fileName": "arcom-github/packages/arcodesign/components/picker/type.ts",
                "name": "PickerProps"
            },
            "required": false,
            "type": {
                "name": "string"
            }
        },
        "maskClosable": {
            "defaultValue": {
                "value": "false"
            },
            "description": "点击蒙层是否关闭菜单\n@en Whether to click the mask to close the menu",
            "name": "maskClosable",
            "tags": {
                "en": "Whether to click the mask to close the menu",
                "default": "false"
            },
            "descWithTags": "点击蒙层是否关闭菜单",
            "parent": {
                "fileName": "arcom-github/packages/arcodesign/components/picker/type.ts",
                "name": "PickerProps"
            },
            "required": false,
            "type": {
                "name": "boolean"
            }
        },
        "touchToStop": {
            "defaultValue": {
                "value": "false"
            },
            "description": "是否通过长按停止滑动，传入数字 x 表示触摸超过 x 毫秒算长按，传 true 表示 x=100，长按事件与 click 事件互斥\n@en Whether to stop sliding by long-pressing, inputing in the number x means that the touch exceeds x milliseconds to count as long-pressing, inputing true means that x=100, the long-press event and the click event are mutually exclusive",
            "name": "touchToStop",
            "tags": {
                "en": "Whether to stop sliding by long-pressing, inputing in the number x means that the touch exceeds x milliseconds to count as long-pressing, inputing true means that x=100, the long-press event and the click event are mutually exclusive",
                "default": "false"
            },
            "descWithTags": "是否通过长按停止滑动，传入数字 x 表示触摸超过 x 毫秒算长按，传 true 表示 x=100，长按事件与 click 事件互斥",
            "parent": {
                "fileName": "arcom-github/packages/arcodesign/components/picker/type.ts",
                "name": "PickerProps"
            },
            "required": false,
            "type": {
                "name": "number | boolean"
            }
        },
        "gestureOutOfControl": {
            "defaultValue": {
                "value": "true"
            },
            "description": "是否禁用滚动容器手势判断，禁用后交给业务方自己判断\n@en Whether to disable the scrolling container gesture judgment, leave it to users to judge",
            "name": "gestureOutOfControl",
            "tags": {
                "en": "Whether to disable the scrolling container gesture judgment, leave it to users to judge",
                "default": "true"
            },
            "descWithTags": "是否禁用滚动容器手势判断，禁用后交给业务方自己判断",
            "parent": {
                "fileName": "arcom-github/packages/arcodesign/components/picker/type.ts",
                "name": "PickerProps"
            },
            "required": false,
            "type": {
                "name": "boolean"
            }
        },
        "needBottomOffset": {
            "defaultValue": {
                "value": "false"
            },
            "description": "从底部滑出的菜单内容是否适配ipx底部\n@en Whether the content of the menu that slides out from the bottom fits the bottom of ipx",
            "name": "needBottomOffset",
            "tags": {
                "en": "Whether the content of the menu that slides out from the bottom fits the bottom of ipx",
                "default": "false"
            },
            "descWithTags": "从底部滑出的菜单内容是否适配ipx底部",
            "parent": {
                "fileName": "arcom-github/packages/arcodesign/components/popup/index.tsx",
                "name": "PopupProps"
            },
            "required": false,
            "type": {
                "name": "boolean"
            }
        },
        "translateZ": {
            "defaultValue": {
                "value": "false"
            },
            "description": "[即将废弃] 开启translateZ强制提升\n@en [To be deprecated] Enable translateZ forced promotion\n@deprecated",
            "name": "translateZ",
            "tags": {
                "en": "[To be deprecated] Enable translateZ forced promotion",
                "default": "false",
                "deprecated": ""
            },
            "descWithTags": "[即将废弃] 开启translateZ强制提升",
            "parent": {
                "fileName": "arcom-github/packages/arcodesign/components/popup/index.tsx",
                "name": "PopupProps"
            },
            "required": false,
            "type": {
                "name": "boolean"
            }
        },
        "maskTransitionTimeout": {
            "defaultValue": {
                "value": "{ enter: 450, exit: 240 }"
            },
            "description": "菜单蒙层动画时长\n@en Menu mask animation duration",
            "name": "maskTransitionTimeout",
            "tags": {
                "en": "Menu mask animation duration",
                "default": "{ enter: 450, exit: 240 }"
            },
            "descWithTags": "菜单蒙层动画时长",
            "parent": {
                "fileName": "arcom-github/packages/arcodesign/components/popup/index.tsx",
                "name": "PopupProps"
            },
            "required": false,
            "type": {
                "name": "number | { appear?: number; enter?: number; exit?: number; }"
            }
        },
        "contentTransitionTimeout": {
            "defaultValue": {
                "value": "{ enter: 450, exit: 240 }"
            },
            "description": "菜单内容动画时长\n@en Menu content animation duration",
            "name": "contentTransitionTimeout",
            "tags": {
                "en": "Menu content animation duration",
                "default": "{ enter: 450, exit: 240 }"
            },
            "descWithTags": "菜单内容动画时长",
            "parent": {
                "fileName": "arcom-github/packages/arcodesign/components/popup/index.tsx",
                "name": "PopupProps"
            },
            "required": false,
            "type": {
                "name": "number | { appear?: number; enter?: number; exit?: number; }"
            }
        },
        "contentTransitionType": {
            "defaultValue": {
                "value": "\\`slide-from-${props.direction}\\`"
            },
            "description": "内容过渡动画类名\n@en Content transition animation classname",
            "name": "contentTransitionType",
            "tags": {
                "en": "Content transition animation classname",
                "default": "\\`slide-from-${props.direction}\\`"
            },
            "descWithTags": "内容过渡动画类名",
            "parent": {
                "fileName": "arcom-github/packages/arcodesign/components/popup/index.tsx",
                "name": "PopupProps"
            },
            "required": false,
            "type": {
                "name": "string"
            }
        },
        "className": {
            "defaultValue": null,
            "description": "自定义类名\n@en Custom classname",
            "name": "className",
            "tags": {
                "en": "Custom classname"
            },
            "descWithTags": "自定义类名",
            "parent": {
                "fileName": "arcom-github/packages/arcodesign/components/masking/index.tsx",
                "name": "MaskingCommonProps"
            },
            "required": false,
            "type": {
                "name": "string"
            }
        },
        "maskClass": {
            "defaultValue": null,
            "description": "自定义蒙层类名\n@en Custom mask classname",
            "name": "maskClass",
            "tags": {
                "en": "Custom mask classname"
            },
            "descWithTags": "自定义蒙层类名",
            "parent": {
                "fileName": "arcom-github/packages/arcodesign/components/masking/index.tsx",
                "name": "MaskingCommonProps"
            },
            "required": false,
            "type": {
                "name": "string"
            }
        },
        "maskStyle": {
            "defaultValue": null,
            "description": "自定义蒙层样式\n@en Custom mask stylesheet",
            "name": "maskStyle",
            "tags": {
                "en": "Custom mask stylesheet"
            },
            "descWithTags": "自定义蒙层样式",
            "parent": {
                "fileName": "arcom-github/packages/arcodesign/components/masking/index.tsx",
                "name": "MaskingCommonProps"
            },
            "required": false,
            "type": {
                "name": "CSSProperties"
            }
        },
        "contentClass": {
            "defaultValue": null,
            "description": "自定义内容类名\n@en Custom content classname",
            "name": "contentClass",
            "tags": {
                "en": "Custom content classname"
            },
            "descWithTags": "自定义内容类名",
            "parent": {
                "fileName": "arcom-github/packages/arcodesign/components/masking/index.tsx",
                "name": "MaskingCommonProps"
            },
            "required": false,
            "type": {
                "name": "string"
            }
        },
        "contentStyle": {
            "defaultValue": null,
            "description": "自定义内容样式\n@en Custom content stylesheet",
            "name": "contentStyle",
            "tags": {
                "en": "Custom content stylesheet"
            },
            "descWithTags": "自定义内容样式",
            "parent": {
                "fileName": "arcom-github/packages/arcodesign/components/masking/index.tsx",
                "name": "MaskingCommonProps"
            },
            "required": false,
            "type": {
                "name": "CSSProperties"
            }
        },
        "maskTransitionType": {
            "defaultValue": {
                "value": "\"fade\""
            },
            "description": "蒙层过渡动画类名\n@en Mask transition animation classname",
            "name": "maskTransitionType",
            "tags": {
                "en": "Mask transition animation classname",
                "default": "\"fade\""
            },
            "descWithTags": "蒙层过渡动画类名",
            "parent": {
                "fileName": "arcom-github/packages/arcodesign/components/masking/index.tsx",
                "name": "MaskingCommonProps"
            },
            "required": false,
            "type": {
                "name": "string"
            }
        },
        "animatingClosable": {
            "defaultValue": {
                "value": "false"
            },
            "description": "执行进场动画时点击蒙层是否可关闭菜单\n@en Whether the menu can be closed by clicking on the mask when performing the entry animation",
            "name": "animatingClosable",
            "tags": {
                "en": "Whether the menu can be closed by clicking on the mask when performing the entry animation",
                "default": "false"
            },
            "descWithTags": "执行进场动画时点击蒙层是否可关闭菜单",
            "parent": {
                "fileName": "arcom-github/packages/arcodesign/components/masking/index.tsx",
                "name": "MaskingCommonProps"
            },
            "required": false,
            "type": {
                "name": "boolean"
            }
        },
        "mountOnEnter": {
            "defaultValue": {
                "value": "true"
            },
            "description": "是否在打开菜单时再加载内容\n@en Whether to reload content when the menu is opened",
            "name": "mountOnEnter",
            "tags": {
                "en": "Whether to reload content when the menu is opened",
                "default": "true"
            },
            "descWithTags": "是否在打开菜单时再加载内容",
            "parent": {
                "fileName": "arcom-github/packages/arcodesign/components/masking/index.tsx",
                "name": "MaskingCommonProps"
            },
            "required": false,
            "type": {
                "name": "boolean"
            }
        },
        "unmountOnExit": {
            "defaultValue": {
                "value": "true"
            },
            "description": "是否在退出时卸载内容\n@en Whether to unmount content on exit",
            "name": "unmountOnExit",
            "tags": {
                "en": "Whether to unmount content on exit",
                "default": "true"
            },
            "descWithTags": "是否在退出时卸载内容",
            "parent": {
                "fileName": "arcom-github/packages/arcodesign/components/masking/index.tsx",
                "name": "MaskingCommonProps"
            },
            "required": false,
            "type": {
                "name": "boolean"
            }
        },
        "preventBodyScroll": {
            "defaultValue": {
                "value": "true"
            },
            "description": "弹窗打开时是否禁止body的滚动\n@en Whether to prohibit the scrolling of the body when the popup is opened",
            "name": "preventBodyScroll",
            "tags": {
                "en": "Whether to prohibit the scrolling of the body when the popup is opened",
                "default": "true"
            },
            "descWithTags": "弹窗打开时是否禁止body的滚动",
            "parent": {
                "fileName": "arcom-github/packages/arcodesign/components/masking/index.tsx",
                "name": "MaskingCommonProps"
            },
            "required": false,
            "type": {
                "name": "boolean"
            }
        },
        "initialBodyOverflow": {
            "defaultValue": {
                "value": "第一个全屏组件（弹窗、toast等）打开时页面overflow值"
            },
            "description": "页面初始 overflow 状态，即关闭弹窗时 overflow 应该还原的状态\n@en The initial overflow state of the page, that is, the state in which overflow should be restored when the popup is closed\n@default_en The page overflow value when the first fullscreen component (popup, toast, etc.) is opened",
            "name": "initialBodyOverflow",
            "tags": {
                "en": "The initial overflow state of the page, that is, the state in which overflow should be restored when the popup is closed",
                "default": "第一个全屏组件（弹窗、toast等）打开时页面overflow值",
                "default_en": "The page overflow value when the first fullscreen component (popup, toast, etc.) is opened"
            },
            "descWithTags": "页面初始 overflow 状态，即关闭弹窗时 overflow 应该还原的状态",
            "parent": {
                "fileName": "arcom-github/packages/arcodesign/components/masking/index.tsx",
                "name": "MaskingCommonProps"
            },
            "required": false,
            "type": {
                "name": "string"
            }
        },
        "onClose": {
            "defaultValue": null,
            "description": "关闭后回调（动画执行完毕）\n@en Callback after closing (animation is completed)",
            "name": "onClose",
            "tags": {
                "en": "Callback after closing (animation is completed)"
            },
            "descWithTags": "关闭后回调（动画执行完毕）",
            "parent": {
                "fileName": "arcom-github/packages/arcodesign/components/masking/index.tsx",
                "name": "MaskingCommonProps"
            },
            "required": false,
            "type": {
                "name": "(scene?: string) => void"
            }
        },
        "onOpen": {
            "defaultValue": null,
            "description": "打开后回调（动画执行完毕）\n@en Callback after opening (animation is completed)",
            "name": "onOpen",
            "tags": {
                "en": "Callback after opening (animation is completed)"
            },
            "descWithTags": "打开后回调（动画执行完毕）",
            "parent": {
                "fileName": "arcom-github/packages/arcodesign/components/masking/index.tsx",
                "name": "MaskingCommonProps"
            },
            "required": false,
            "type": {
                "name": "() => void"
            }
        },
        "onMaskClick": {
            "defaultValue": null,
            "description": "点击蒙层回调，maskClosable=false时也会触发\n@en Callback when clicking the mask , also triggered when maskClosable=false",
            "name": "onMaskClick",
            "tags": {
                "en": "Callback when clicking the mask , also triggered when maskClosable=false"
            },
            "descWithTags": "点击蒙层回调，maskClosable=false时也会触发",
            "parent": {
                "fileName": "arcom-github/packages/arcodesign/components/masking/index.tsx",
                "name": "MaskingCommonProps"
            },
            "required": false,
            "type": {
                "name": "() => void"
            }
        },
        "onTouchMove": {
            "defaultValue": null,
            "description": "弹窗的touchmove回调\n@en Touch event callbacks for masking",
            "name": "onTouchMove",
            "tags": {
                "en": "Touch event callbacks for masking"
            },
            "descWithTags": "弹窗的touchmove回调",
            "parent": {
                "fileName": "arcom-github/packages/arcodesign/components/masking/index.tsx",
                "name": "MaskingCommonProps"
            },
            "required": false,
            "type": {
                "name": "(e: TouchEvent, prevented: boolean, direction: \"x\" | \"y\") => void"
            }
        },
        "onPreventTouchMove": {
            "defaultValue": null,
            "description": "非滚动区域或滚动到顶部及底部时的触摸事件回调\n@en Touch event callbacks for non-scrolling areas or when scrolling to the top and bottom",
            "name": "onPreventTouchMove",
            "tags": {
                "en": "Touch event callbacks for non-scrolling areas or when scrolling to the top and bottom"
            },
            "descWithTags": "非滚动区域或滚动到顶部及底部时的触摸事件回调",
            "parent": {
                "fileName": "arcom-github/packages/arcodesign/components/masking/index.tsx",
                "name": "MaskingCommonProps"
            },
            "required": false,
            "type": {
                "name": "(e: TouchEvent, direction: \"x\" | \"y\") => void"
            }
        },
        "getContainer": {
            "defaultValue": null,
            "description": "获取挂载容器\n@en Get mounted container",
            "name": "getContainer",
            "tags": {
                "en": "Get mounted container"
            },
            "descWithTags": "获取挂载容器",
            "parent": {
                "fileName": "arcom-github/packages/arcodesign/components/masking/index.tsx",
                "name": "MaskingCommonProps"
            },
            "required": false,
            "type": {
                "name": "() => HTMLElement"
            }
        },
        "ref": {
            "defaultValue": null,
            "description": "",
            "name": "ref",
            "tags": {},
            "descWithTags": "",
            "parent": {
                "fileName": "arcom-github/node_modules/@types/react/index.d.ts",
                "name": "RefAttributes"
            },
            "required": false,
            "type": {
                "name": "Ref<PickerRef>"
            }
        }
    },
    "deps": {
        "PickerData": {
            "value": {
                "name": "value",
                "required": true,
                "description": "每一列展示的每项文案对应的值\n@en The value for each item displayed in each column",
                "defaultValue": null,
                "type": {
                    "name": "ValueType"
                },
                "tags": {
                    "en": "The value for each item displayed in each column"
                },
                "descWithTags": "每一列展示的每项文案对应的值"
            },
            "label": {
                "name": "label",
                "required": true,
                "description": "每一列展示的文案\n@en Text displayed in each column",
                "defaultValue": null,
                "type": {
                    "name": "ReactNode"
                },
                "tags": {
                    "en": "Text displayed in each column"
                },
                "descWithTags": "每一列展示的文案"
            },
            "children": {
                "name": "children",
                "required": false,
                "description": "级联状态下，该列对应的下一列数据\n@en In the cascade state, the next column of data corresponding to this column",
                "defaultValue": null,
                "type": {
                    "name": "PickerData[]"
                },
                "tags": {
                    "en": "In the cascade state, the next column of data corresponding to this column"
                },
                "descWithTags": "级联状态下，该列对应的下一列数据"
            }
        },
        "ValueType": "string|number",
        "PickerRef": {
            "dom": {
                "name": "dom",
                "required": true,
                "description": "最外层元素 DOM\n@en The outermost element DOM",
                "defaultValue": null,
                "type": {
                    "name": "HTMLDivElement"
                },
                "tags": {
                    "en": "The outermost element DOM"
                },
                "descWithTags": "最外层元素 DOM"
            },
            "getCellMovingStatus": {
                "name": "getCellMovingStatus",
                "required": true,
                "description": "每一列的滑动状态\n@en Sliding state of each column",
                "defaultValue": null,
                "type": {
                    "name": "() => PickerCellMovingStatus[]"
                },
                "tags": {
                    "en": "Sliding state of each column"
                },
                "descWithTags": "每一列的滑动状态"
            },
            "updateLayout": {
                "name": "updateLayout",
                "required": true,
                "description": "手动更新元素布局\n@en Manually update the element layout",
                "defaultValue": null,
                "type": {
                    "name": "() => void"
                },
                "tags": {
                    "en": "Manually update the element layout"
                },
                "descWithTags": "手动更新元素布局"
            },
            "getAllColumnValues": {
                "name": "getAllColumnValues",
                "required": true,
                "description": "获取所有列的值\n@en Get all column values",
                "defaultValue": null,
                "type": {
                    "name": "() => ValueType[]"
                },
                "tags": {
                    "en": "Get all column values"
                },
                "descWithTags": "获取所有列的值"
            },
            "getColumnValue": {
                "name": "getColumnValue",
                "required": true,
                "description": "获取第 n 列的值\n@en Get the value of the nth column",
                "defaultValue": null,
                "type": {
                    "name": "(index: number) => ValueType"
                },
                "tags": {
                    "en": "Get the value of the nth column"
                },
                "descWithTags": "获取第 n 列的值"
            },
            "scrollToCurrentIndex": {
                "name": "scrollToCurrentIndex",
                "required": true,
                "description": "直接跳到当前最近一行（调用时将中断滚动）\n@en Jump directly to the current most recent line (will break scrolling when called)",
                "defaultValue": null,
                "type": {
                    "name": "() => void"
                },
                "tags": {
                    "en": "Jump directly to the current most recent line (will break scrolling when called)"
                },
                "descWithTags": "直接跳到当前最近一行（调用时将中断滚动）"
            }
        },
        "PickerCellMovingStatus": "\"normal\"|\"moving\"|\"scrolling\"",
        "RegExpMatchArray": {
            "index": {
                "name": "index",
                "required": false,
                "description": "",
                "defaultValue": null,
                "type": {
                    "name": "number"
                },
                "tags": {},
                "descWithTags": ""
            },
            "input": {
                "name": "input",
                "required": false,
                "description": "",
                "defaultValue": null,
                "type": {
                    "name": "string"
                },
                "tags": {},
                "descWithTags": ""
            },
            "groups": {
                "name": "groups",
                "required": false,
                "description": "",
                "defaultValue": null,
                "type": {
                    "name": "{ [key: string]: string; }"
                },
                "tags": {},
                "descWithTags": ""
            },
            "length": {
                "name": "length",
                "required": true,
                "description": "Gets or sets the length of the array. This is a number one higher than the highest element defined in an array.",
                "defaultValue": null,
                "type": {
                    "name": "number"
                },
                "tags": {},
                "descWithTags": "Gets or sets the length of the array. This is a number one higher than the highest element defined in an array."
            },
            "toString": {
                "name": "toString",
                "required": true,
                "description": "Returns a string representation of an array.",
                "defaultValue": null,
                "type": {
                    "name": "() => string"
                },
                "tags": {},
                "descWithTags": "Returns a string representation of an array."
            },
            "toLocaleString": {
                "name": "toLocaleString",
                "required": true,
                "description": "Returns a string representation of an array. The elements are converted to string using their toLocalString methods.",
                "defaultValue": null,
                "type": {
                    "name": "() => string"
                },
                "tags": {},
                "descWithTags": "Returns a string representation of an array. The elements are converted to string using their toLocalString methods."
            },
            "pop": {
                "name": "pop",
                "required": true,
                "description": "Removes the last element from an array and returns it.",
                "defaultValue": null,
                "type": {
                    "name": "() => string"
                },
                "tags": {},
                "descWithTags": "Removes the last element from an array and returns it."
            },
            "push": {
                "name": "push",
                "required": true,
                "description": "Appends new elements to an array, and returns the new length of the array.\n@param items New elements of the Array.",
                "defaultValue": null,
                "type": {
                    "name": "(...items: string[]) => number"
                },
                "tags": {
                    "param": "items New elements of the Array."
                },
                "descWithTags": "Appends new elements to an array, and returns the new length of the array."
            },
            "concat": {
                "name": "concat",
                "required": true,
                "description": "Combines two or more arrays.\nCombines two or more arrays.\n@param items Additional items to add to the end of array1.\n@param items Additional items to add to the end of array1.",
                "defaultValue": null,
                "type": {
                    "name": "{ (...items: ConcatArray<string>[]): string[]; (...items: (string | ConcatArray<string>)[]): string[]; }"
                },
                "tags": {
                    "param": "items Additional items to add to the end of array1.\nitems Additional items to add to the end of array1."
                },
                "descWithTags": "Combines two or more arrays.\nCombines two or more arrays."
            },
            "join": {
                "name": "join",
                "required": true,
                "description": "Adds all the elements of an array separated by the specified separator string.\n@param separator A string used to separate one element of an array from the next in the resulting String. If omitted, the array elements are separated with a comma.",
                "defaultValue": null,
                "type": {
                    "name": "(separator?: string) => string"
                },
                "tags": {
                    "param": "separator A string used to separate one element of an array from the next in the resulting String. If omitted, the array elements are separated with a comma."
                },
                "descWithTags": "Adds all the elements of an array separated by the specified separator string."
            },
            "reverse": {
                "name": "reverse",
                "required": true,
                "description": "Reverses the elements in an Array.",
                "defaultValue": null,
                "type": {
                    "name": "() => string[]"
                },
                "tags": {},
                "descWithTags": "Reverses the elements in an Array."
            },
            "shift": {
                "name": "shift",
                "required": true,
                "description": "Removes the first element from an array and returns it.",
                "defaultValue": null,
                "type": {
                    "name": "() => string"
                },
                "tags": {},
                "descWithTags": "Removes the first element from an array and returns it."
            },
            "slice": {
                "name": "slice",
                "required": true,
                "description": "Returns a section of an array.\n@param start The beginning of the specified portion of the array.\n@param end The end of the specified portion of the array. This is exclusive of the element at the index 'end'.",
                "defaultValue": null,
                "type": {
                    "name": "(start?: number, end?: number) => string[]"
                },
                "tags": {
                    "param": "start The beginning of the specified portion of the array.\nend The end of the specified portion of the array. This is exclusive of the element at the index 'end'."
                },
                "descWithTags": "Returns a section of an array."
            },
            "sort": {
                "name": "sort",
                "required": true,
                "description": "Sorts an array.\n@param compareFn Function used to determine the order of the elements. It is expected to return\ra negative value if first argument is less than second argument, zero if they're equal and a positive\rvalue otherwise. If omitted, the elements are sorted in ascending, ASCII character order.\r```ts\r[11,2,22,1].sort((a, b) => a - b)\r```",
                "defaultValue": null,
                "type": {
                    "name": "(compareFn?: (a: string, b: string) => number) => RegExpMatchArray"
                },
                "tags": {
                    "param": "compareFn Function used to determine the order of the elements. It is expected to return\ra negative value if first argument is less than second argument, zero if they're equal and a positive\rvalue otherwise. If omitted, the elements are sorted in ascending, ASCII character order.\r```ts\r[11,2,22,1].sort((a, b) => a - b)\r```"
                },
                "descWithTags": "Sorts an array."
            },
            "splice": {
                "name": "splice",
                "required": true,
                "description": "Removes elements from an array and, if necessary, inserts new elements in their place, returning the deleted elements.\nRemoves elements from an array and, if necessary, inserts new elements in their place, returning the deleted elements.\n@param start The zero-based location in the array from which to start removing elements.\n@param deleteCount The number of elements to remove.\n@param start The zero-based location in the array from which to start removing elements.\n@param deleteCount The number of elements to remove.\n@param items Elements to insert into the array in place of the deleted elements.",
                "defaultValue": null,
                "type": {
                    "name": "{ (start: number, deleteCount?: number): string[]; (start: number, deleteCount: number, ...items: string[]): string[]; }"
                },
                "tags": {
                    "param": "start The zero-based location in the array from which to start removing elements.\ndeleteCount The number of elements to remove.\nstart The zero-based location in the array from which to start removing elements.\ndeleteCount The number of elements to remove.\nitems Elements to insert into the array in place of the deleted elements."
                },
                "descWithTags": "Removes elements from an array and, if necessary, inserts new elements in their place, returning the deleted elements.\nRemoves elements from an array and, if necessary, inserts new elements in their place, returning the deleted elements."
            },
            "unshift": {
                "name": "unshift",
                "required": true,
                "description": "Inserts new elements at the start of an array.\n@param items Elements to insert at the start of the Array.",
                "defaultValue": null,
                "type": {
                    "name": "(...items: string[]) => number"
                },
                "tags": {
                    "param": "items Elements to insert at the start of the Array."
                },
                "descWithTags": "Inserts new elements at the start of an array."
            },
            "indexOf": {
                "name": "indexOf",
                "required": true,
                "description": "Returns the index of the first occurrence of a value in an array.\n@param searchElement The value to locate in the array.\n@param fromIndex The array index at which to begin the search. If fromIndex is omitted, the search starts at index 0.",
                "defaultValue": null,
                "type": {
                    "name": "(searchElement: string, fromIndex?: number) => number"
                },
                "tags": {
                    "param": "searchElement The value to locate in the array.\nfromIndex The array index at which to begin the search. If fromIndex is omitted, the search starts at index 0."
                },
                "descWithTags": "Returns the index of the first occurrence of a value in an array."
            },
            "lastIndexOf": {
                "name": "lastIndexOf",
                "required": true,
                "description": "Returns the index of the last occurrence of a specified value in an array.\n@param searchElement The value to locate in the array.\n@param fromIndex The array index at which to begin the search. If fromIndex is omitted, the search starts at the last index in the array.",
                "defaultValue": null,
                "type": {
                    "name": "(searchElement: string, fromIndex?: number) => number"
                },
                "tags": {
                    "param": "searchElement The value to locate in the array.\nfromIndex The array index at which to begin the search. If fromIndex is omitted, the search starts at the last index in the array."
                },
                "descWithTags": "Returns the index of the last occurrence of a specified value in an array."
            },
            "every": {
                "name": "every",
                "required": true,
                "description": "Determines whether all the members of an array satisfy the specified test.\n@param callbackfn A function that accepts up to three arguments. The every method calls\rthe callbackfn function for each element in the array until the callbackfn returns a value\rwhich is coercible to the Boolean value false, or until the end of the array.\n@param thisArg An object to which the this keyword can refer in the callbackfn function.\rIf thisArg is omitted, undefined is used as the this value.",
                "defaultValue": null,
                "type": {
                    "name": "(callbackfn: (value: string, index: number, array: string[]) => unknown, thisArg?: any) => boolean"
                },
                "tags": {
                    "param": "callbackfn A function that accepts up to three arguments. The every method calls\rthe callbackfn function for each element in the array until the callbackfn returns a value\rwhich is coercible to the Boolean value false, or until the end of the array.\nthisArg An object to which the this keyword can refer in the callbackfn function.\rIf thisArg is omitted, undefined is used as the this value."
                },
                "descWithTags": "Determines whether all the members of an array satisfy the specified test."
            },
            "some": {
                "name": "some",
                "required": true,
                "description": "Determines whether the specified callback function returns true for any element of an array.\n@param callbackfn A function that accepts up to three arguments. The some method calls\rthe callbackfn function for each element in the array until the callbackfn returns a value\rwhich is coercible to the Boolean value true, or until the end of the array.\n@param thisArg An object to which the this keyword can refer in the callbackfn function.\rIf thisArg is omitted, undefined is used as the this value.",
                "defaultValue": null,
                "type": {
                    "name": "(callbackfn: (value: string, index: number, array: string[]) => unknown, thisArg?: any) => boolean"
                },
                "tags": {
                    "param": "callbackfn A function that accepts up to three arguments. The some method calls\rthe callbackfn function for each element in the array until the callbackfn returns a value\rwhich is coercible to the Boolean value true, or until the end of the array.\nthisArg An object to which the this keyword can refer in the callbackfn function.\rIf thisArg is omitted, undefined is used as the this value."
                },
                "descWithTags": "Determines whether the specified callback function returns true for any element of an array."
            },
            "forEach": {
                "name": "forEach",
                "required": true,
                "description": "Performs the specified action for each element in an array.\n@param callbackfn A function that accepts up to three arguments. forEach calls the callbackfn function one time for each element in the array.\n@param thisArg An object to which the this keyword can refer in the callbackfn function. If thisArg is omitted, undefined is used as the this value.",
                "defaultValue": null,
                "type": {
                    "name": "(callbackfn: (value: string, index: number, array: string[]) => void, thisArg?: any) => void"
                },
                "tags": {
                    "param": "callbackfn A function that accepts up to three arguments. forEach calls the callbackfn function one time for each element in the array.\nthisArg An object to which the this keyword can refer in the callbackfn function. If thisArg is omitted, undefined is used as the this value."
                },
                "descWithTags": "Performs the specified action for each element in an array."
            },
            "map": {
                "name": "map",
                "required": true,
                "description": "Calls a defined callback function on each element of an array, and returns an array that contains the results.\n@param callbackfn A function that accepts up to three arguments. The map method calls the callbackfn function one time for each element in the array.\n@param thisArg An object to which the this keyword can refer in the callbackfn function. If thisArg is omitted, undefined is used as the this value.",
                "defaultValue": null,
                "type": {
                    "name": "<U>(callbackfn: (value: string, index: number, array: string[]) => U, thisArg?: any) => U[]"
                },
                "tags": {
                    "param": "callbackfn A function that accepts up to three arguments. The map method calls the callbackfn function one time for each element in the array.\nthisArg An object to which the this keyword can refer in the callbackfn function. If thisArg is omitted, undefined is used as the this value."
                },
                "descWithTags": "Calls a defined callback function on each element of an array, and returns an array that contains the results."
            },
            "filter": {
                "name": "filter",
                "required": true,
                "description": "Returns the elements of an array that meet the condition specified in a callback function.\nReturns the elements of an array that meet the condition specified in a callback function.\n@param callbackfn A function that accepts up to three arguments. The filter method calls the callbackfn function one time for each element in the array.\n@param thisArg An object to which the this keyword can refer in the callbackfn function. If thisArg is omitted, undefined is used as the this value.\n@param callbackfn A function that accepts up to three arguments. The filter method calls the callbackfn function one time for each element in the array.\n@param thisArg An object to which the this keyword can refer in the callbackfn function. If thisArg is omitted, undefined is used as the this value.",
                "defaultValue": null,
                "type": {
                    "name": "{ <S extends string>(callbackfn: (value: string, index: number, array: string[]) => value is S, thisArg?: any): S[]; (callbackfn: (value: string, index: number, array: string[]) => unknown, thisArg?: any): string[]; }"
                },
                "tags": {
                    "param": "callbackfn A function that accepts up to three arguments. The filter method calls the callbackfn function one time for each element in the array.\nthisArg An object to which the this keyword can refer in the callbackfn function. If thisArg is omitted, undefined is used as the this value.\ncallbackfn A function that accepts up to three arguments. The filter method calls the callbackfn function one time for each element in the array.\nthisArg An object to which the this keyword can refer in the callbackfn function. If thisArg is omitted, undefined is used as the this value."
                },
                "descWithTags": "Returns the elements of an array that meet the condition specified in a callback function.\nReturns the elements of an array that meet the condition specified in a callback function."
            },
            "reduce": {
                "name": "reduce",
                "required": true,
                "description": "Calls the specified callback function for all the elements in an array. The return value of the callback function is the accumulated result, and is provided as an argument in the next call to the callback function.\nCalls the specified callback function for all the elements in an array. The return value of the callback function is the accumulated result, and is provided as an argument in the next call to the callback function.\n@param callbackfn A function that accepts up to four arguments. The reduce method calls the callbackfn function one time for each element in the array.\n@param initialValue If initialValue is specified, it is used as the initial value to start the accumulation. The first call to the callbackfn function provides this value as an argument instead of an array value.\n@param callbackfn A function that accepts up to four arguments. The reduce method calls the callbackfn function one time for each element in the array.\n@param initialValue If initialValue is specified, it is used as the initial value to start the accumulation. The first call to the callbackfn function provides this value as an argument instead of an array value.",
                "defaultValue": null,
                "type": {
                    "name": "{ (callbackfn: (previousValue: string, currentValue: string, currentIndex: number, array: string[]) => string): string; (callbackfn: (previousValue: string, currentValue: string, currentIndex: number, array: string[]) => string, initialValue: string): string; <U>(callbackfn: (previousValue: U, currentValue: string, ..."
                },
                "tags": {
                    "param": "callbackfn A function that accepts up to four arguments. The reduce method calls the callbackfn function one time for each element in the array.\ninitialValue If initialValue is specified, it is used as the initial value to start the accumulation. The first call to the callbackfn function provides this value as an argument instead of an array value.\ncallbackfn A function that accepts up to four arguments. The reduce method calls the callbackfn function one time for each element in the array.\ninitialValue If initialValue is specified, it is used as the initial value to start the accumulation. The first call to the callbackfn function provides this value as an argument instead of an array value."
                },
                "descWithTags": "Calls the specified callback function for all the elements in an array. The return value of the callback function is the accumulated result, and is provided as an argument in the next call to the callback function.\nCalls the specified callback function for all the elements in an array. The return value of the callback function is the accumulated result, and is provided as an argument in the next call to the callback function."
            },
            "reduceRight": {
                "name": "reduceRight",
                "required": true,
                "description": "Calls the specified callback function for all the elements in an array, in descending order. The return value of the callback function is the accumulated result, and is provided as an argument in the next call to the callback function.\nCalls the specified callback function for all the elements in an array, in descending order. The return value of the callback function is the accumulated result, and is provided as an argument in the next call to the callback function.\n@param callbackfn A function that accepts up to four arguments. The reduceRight method calls the callbackfn function one time for each element in the array.\n@param initialValue If initialValue is specified, it is used as the initial value to start the accumulation. The first call to the callbackfn function provides this value as an argument instead of an array value.\n@param callbackfn A function that accepts up to four arguments. The reduceRight method calls the callbackfn function one time for each element in the array.\n@param initialValue If initialValue is specified, it is used as the initial value to start the accumulation. The first call to the callbackfn function provides this value as an argument instead of an array value.",
                "defaultValue": null,
                "type": {
                    "name": "{ (callbackfn: (previousValue: string, currentValue: string, currentIndex: number, array: string[]) => string): string; (callbackfn: (previousValue: string, currentValue: string, currentIndex: number, array: string[]) => string, initialValue: string): string; <U>(callbackfn: (previousValue: U, currentValue: string, ..."
                },
                "tags": {
                    "param": "callbackfn A function that accepts up to four arguments. The reduceRight method calls the callbackfn function one time for each element in the array.\ninitialValue If initialValue is specified, it is used as the initial value to start the accumulation. The first call to the callbackfn function provides this value as an argument instead of an array value.\ncallbackfn A function that accepts up to four arguments. The reduceRight method calls the callbackfn function one time for each element in the array.\ninitialValue If initialValue is specified, it is used as the initial value to start the accumulation. The first call to the callbackfn function provides this value as an argument instead of an array value."
                },
                "descWithTags": "Calls the specified callback function for all the elements in an array, in descending order. The return value of the callback function is the accumulated result, and is provided as an argument in the next call to the callback function.\nCalls the specified callback function for all the elements in an array, in descending order. The return value of the callback function is the accumulated result, and is provided as an argument in the next call to the callback function."
            },
            "find": {
                "name": "find",
                "required": true,
                "description": "Returns the value of the first element in the array where predicate is true, and undefined\notherwise.\n@param predicate find calls predicate once for each element of the array, in ascending\rorder, until it finds one where predicate returns true. If such an element is found, find\rimmediately returns that element value. Otherwise, find returns undefined.\n@param thisArg If provided, it will be used as the this value for each invocation of\rpredicate. If it is not provided, undefined is used instead.",
                "defaultValue": null,
                "type": {
                    "name": "{ <S extends string>(predicate: (this: void, value: string, index: number, obj: string[]) => value is S, thisArg?: any): S; (predicate: (value: string, index: number, obj: string[]) => unknown, thisArg?: any): string; }"
                },
                "tags": {
                    "param": "predicate find calls predicate once for each element of the array, in ascending\rorder, until it finds one where predicate returns true. If such an element is found, find\rimmediately returns that element value. Otherwise, find returns undefined.\nthisArg If provided, it will be used as the this value for each invocation of\rpredicate. If it is not provided, undefined is used instead."
                },
                "descWithTags": "Returns the value of the first element in the array where predicate is true, and undefined\notherwise."
            },
            "findIndex": {
                "name": "findIndex",
                "required": true,
                "description": "Returns the index of the first element in the array where predicate is true, and -1\notherwise.\n@param predicate find calls predicate once for each element of the array, in ascending\rorder, until it finds one where predicate returns true. If such an element is found,\rfindIndex immediately returns that element index. Otherwise, findIndex returns -1.\n@param thisArg If provided, it will be used as the this value for each invocation of\rpredicate. If it is not provided, undefined is used instead.",
                "defaultValue": null,
                "type": {
                    "name": "(predicate: (value: string, index: number, obj: string[]) => unknown, thisArg?: any) => number"
                },
                "tags": {
                    "param": "predicate find calls predicate once for each element of the array, in ascending\rorder, until it finds one where predicate returns true. If such an element is found,\rfindIndex immediately returns that element index. Otherwise, findIndex returns -1.\nthisArg If provided, it will be used as the this value for each invocation of\rpredicate. If it is not provided, undefined is used instead."
                },
                "descWithTags": "Returns the index of the first element in the array where predicate is true, and -1\notherwise."
            },
            "fill": {
                "name": "fill",
                "required": true,
                "description": "Returns the this object after filling the section identified by start and end with value\n@param value value to fill array section with\n@param start index to start filling the array at. If start is negative, it is treated as\rlength+start where length is the length of the array.\n@param end index to stop filling the array at. If end is negative, it is treated as\rlength+end.",
                "defaultValue": null,
                "type": {
                    "name": "(value: string, start?: number, end?: number) => RegExpMatchArray"
                },
                "tags": {
                    "param": "value value to fill array section with\nstart index to start filling the array at. If start is negative, it is treated as\rlength+start where length is the length of the array.\nend index to stop filling the array at. If end is negative, it is treated as\rlength+end."
                },
                "descWithTags": "Returns the this object after filling the section identified by start and end with value"
            },
            "copyWithin": {
                "name": "copyWithin",
                "required": true,
                "description": "Returns the this object after copying a section of the array identified by start and end\nto the same array starting at position target\n@param target If target is negative, it is treated as length+target where length is the\rlength of the array.\n@param start If start is negative, it is treated as length+start. If end is negative, it\ris treated as length+end.\n@param end If not specified, length of the this object is used as its default value.",
                "defaultValue": null,
                "type": {
                    "name": "(target: number, start: number, end?: number) => RegExpMatchArray"
                },
                "tags": {
                    "param": "target If target is negative, it is treated as length+target where length is the\rlength of the array.\nstart If start is negative, it is treated as length+start. If end is negative, it\ris treated as length+end.\nend If not specified, length of the this object is used as its default value."
                },
                "descWithTags": "Returns the this object after copying a section of the array identified by start and end\nto the same array starting at position target"
            },
            "__@iterator": {
                "name": "__@iterator",
                "required": true,
                "description": "Iterator",
                "defaultValue": null,
                "type": {
                    "name": "() => IterableIterator<string>"
                },
                "tags": {},
                "descWithTags": "Iterator"
            },
            "entries": {
                "name": "entries",
                "required": true,
                "description": "Returns an iterable of key, value pairs for every entry in the array",
                "defaultValue": null,
                "type": {
                    "name": "() => IterableIterator<[number, string]>"
                },
                "tags": {},
                "descWithTags": "Returns an iterable of key, value pairs for every entry in the array"
            },
            "keys": {
                "name": "keys",
                "required": true,
                "description": "Returns an iterable of keys in the array",
                "defaultValue": null,
                "type": {
                    "name": "() => IterableIterator<number>"
                },
                "tags": {},
                "descWithTags": "Returns an iterable of keys in the array"
            },
            "values": {
                "name": "values",
                "required": true,
                "description": "Returns an iterable of values in the array",
                "defaultValue": null,
                "type": {
                    "name": "() => IterableIterator<string>"
                },
                "tags": {},
                "descWithTags": "Returns an iterable of values in the array"
            },
            "__@unscopables": {
                "name": "__@unscopables",
                "required": true,
                "description": "Returns an object whose properties have the value 'true'\nwhen they will be absent when used in a 'with' statement.",
                "defaultValue": null,
                "type": {
                    "name": "() => { copyWithin: boolean; entries: boolean; fill: boolean; find: boolean; findIndex: boolean; keys: boolean; values: boolean; }"
                },
                "tags": {},
                "descWithTags": "Returns an object whose properties have the value 'true'\nwhen they will be absent when used in a 'with' statement."
            },
            "includes": {
                "name": "includes",
                "required": true,
                "description": "Determines whether an array includes a certain element, returning true or false as appropriate.\n@param searchElement The element to search for.\n@param fromIndex The position in this array at which to begin searching for searchElement.",
                "defaultValue": null,
                "type": {
                    "name": "(searchElement: string, fromIndex?: number) => boolean"
                },
                "tags": {
                    "param": "searchElement The element to search for.\nfromIndex The position in this array at which to begin searching for searchElement."
                },
                "descWithTags": "Determines whether an array includes a certain element, returning true or false as appropriate."
            },
            "flatMap": {
                "name": "flatMap",
                "required": true,
                "description": "Calls a defined callback function on each element of an array. Then, flattens the result into\na new array.\r\nThis is identical to a map followed by flat with depth 1.\n@param callback A function that accepts up to three arguments. The flatMap method calls the\rcallback function one time for each element in the array.\n@param thisArg An object to which the this keyword can refer in the callback function. If\rthisArg is omitted, undefined is used as the this value.",
                "defaultValue": null,
                "type": {
                    "name": "<U, This = undefined>(callback: (this: This, value: string, index: number, array: string[]) => U | readonly U[], thisArg?: This) => U[]"
                },
                "tags": {
                    "param": "callback A function that accepts up to three arguments. The flatMap method calls the\rcallback function one time for each element in the array.\nthisArg An object to which the this keyword can refer in the callback function. If\rthisArg is omitted, undefined is used as the this value."
                },
                "descWithTags": "Calls a defined callback function on each element of an array. Then, flattens the result into\na new array.\r\nThis is identical to a map followed by flat with depth 1."
            },
            "flat": {
                "name": "flat",
                "required": true,
                "description": "Returns a new array with all sub-array elements concatenated into it recursively up to the\nspecified depth.\n@param depth The maximum recursion depth",
                "defaultValue": null,
                "type": {
                    "name": "<A, D extends number = 1>(this: A, depth?: D) => FlatArray<A, D>[]"
                },
                "tags": {
                    "param": "depth The maximum recursion depth"
                },
                "descWithTags": "Returns a new array with all sub-array elements concatenated into it recursively up to the\nspecified depth."
            },
            "at": {
                "name": "at",
                "required": true,
                "description": "Takes an integer value and returns the item at that index,\nallowing for positive and negative integers.\nNegative integers count back from the last item in the array.",
                "defaultValue": null,
                "type": {
                    "name": "(index: number) => string"
                },
                "tags": {},
                "descWithTags": "Takes an integer value and returns the item at that index,\nallowing for positive and negative integers.\nNegative integers count back from the last item in the array."
            }
        },
        "ConcatArray": {
            "T": {
                "name": "T",
                "required": true,
                "description": "",
                "defaultValue": null,
                "type": {
                    "name": "any"
                },
                "tags": {},
                "descWithTags": ""
            },
            "length": {
                "name": "length",
                "required": true,
                "description": "",
                "defaultValue": null,
                "type": {
                    "name": "number"
                },
                "tags": {},
                "descWithTags": ""
            },
            "__index": {
                "name": "__index",
                "required": true,
                "description": "",
                "defaultValue": null,
                "type": {
                    "name": "any"
                },
                "tags": {},
                "descWithTags": ""
            },
            "join": {
                "name": "join",
                "required": true,
                "description": "",
                "defaultValue": null,
                "type": {
                    "name": "(separator?: string) => string"
                },
                "tags": {},
                "descWithTags": ""
            },
            "slice": {
                "name": "slice",
                "required": true,
                "description": "",
                "defaultValue": null,
                "type": {
                    "name": "(start?: number, end?: number) => T[]"
                },
                "tags": {},
                "descWithTags": ""
            }
        },
        "IterableIterator": {
            "T": {
                "name": "T",
                "required": true,
                "description": "",
                "defaultValue": null,
                "type": {
                    "name": "any"
                },
                "tags": {},
                "descWithTags": ""
            },
            "__@iterator": {
                "name": "__@iterator",
                "required": true,
                "description": "",
                "defaultValue": null,
                "type": {
                    "name": "() => IterableIterator<T>"
                },
                "tags": {},
                "descWithTags": ""
            },
            "next": {
                "name": "next",
                "required": true,
                "description": "",
                "defaultValue": null,
                "type": {
                    "name": "(...args: [] | [undefined]) => IteratorResult<T, any>"
                },
                "tags": {},
                "descWithTags": ""
            },
            "return": {
                "name": "return",
                "required": false,
                "description": "",
                "defaultValue": null,
                "type": {
                    "name": "(value?: any) => IteratorResult<T, any>"
                },
                "tags": {},
                "descWithTags": ""
            },
            "throw": {
                "name": "throw",
                "required": false,
                "description": "",
                "defaultValue": null,
                "type": {
                    "name": "(e?: any) => IteratorResult<T, any>"
                },
                "tags": {},
                "descWithTags": ""
            }
        },
        "IteratorResult": "IteratorYieldResult<string>|IteratorReturnResult<any>",
        "ReadonlyArray": {
            "T": {
                "name": "T",
                "required": true,
                "description": "",
                "defaultValue": null,
                "type": {
                    "name": "any"
                },
                "tags": {},
                "descWithTags": ""
            },
            "length": {
                "name": "length",
                "required": true,
                "description": "Gets the length of the array. This is a number one higher than the highest element defined in an array.",
                "defaultValue": null,
                "type": {
                    "name": "number"
                },
                "tags": {},
                "descWithTags": "Gets the length of the array. This is a number one higher than the highest element defined in an array."
            },
            "toString": {
                "name": "toString",
                "required": true,
                "description": "Returns a string representation of an array.",
                "defaultValue": null,
                "type": {
                    "name": "() => string"
                },
                "tags": {},
                "descWithTags": "Returns a string representation of an array."
            },
            "toLocaleString": {
                "name": "toLocaleString",
                "required": true,
                "description": "Returns a string representation of an array. The elements are converted to string using their toLocalString methods.",
                "defaultValue": null,
                "type": {
                    "name": "() => string"
                },
                "tags": {},
                "descWithTags": "Returns a string representation of an array. The elements are converted to string using their toLocalString methods."
            },
            "concat": {
                "name": "concat",
                "required": true,
                "description": "Combines two or more arrays.\nCombines two or more arrays.\n@param items Additional items to add to the end of array1.\n@param items Additional items to add to the end of array1.",
                "defaultValue": null,
                "type": {
                    "name": "{ (...items: ConcatArray<T>[]): T[]; (...items: (T | ConcatArray<T>)[]): T[]; }"
                },
                "tags": {
                    "param": "items Additional items to add to the end of array1.\nitems Additional items to add to the end of array1."
                },
                "descWithTags": "Combines two or more arrays.\nCombines two or more arrays."
            },
            "join": {
                "name": "join",
                "required": true,
                "description": "Adds all the elements of an array separated by the specified separator string.\n@param separator A string used to separate one element of an array from the next in the resulting String. If omitted, the array elements are separated with a comma.",
                "defaultValue": null,
                "type": {
                    "name": "(separator?: string) => string"
                },
                "tags": {
                    "param": "separator A string used to separate one element of an array from the next in the resulting String. If omitted, the array elements are separated with a comma."
                },
                "descWithTags": "Adds all the elements of an array separated by the specified separator string."
            },
            "slice": {
                "name": "slice",
                "required": true,
                "description": "Returns a section of an array.\n@param start The beginning of the specified portion of the array.\n@param end The end of the specified portion of the array. This is exclusive of the element at the index 'end'.",
                "defaultValue": null,
                "type": {
                    "name": "(start?: number, end?: number) => T[]"
                },
                "tags": {
                    "param": "start The beginning of the specified portion of the array.\nend The end of the specified portion of the array. This is exclusive of the element at the index 'end'."
                },
                "descWithTags": "Returns a section of an array."
            },
            "indexOf": {
                "name": "indexOf",
                "required": true,
                "description": "Returns the index of the first occurrence of a value in an array.\n@param searchElement The value to locate in the array.\n@param fromIndex The array index at which to begin the search. If fromIndex is omitted, the search starts at index 0.",
                "defaultValue": null,
                "type": {
                    "name": "(searchElement: T, fromIndex?: number) => number"
                },
                "tags": {
                    "param": "searchElement The value to locate in the array.\nfromIndex The array index at which to begin the search. If fromIndex is omitted, the search starts at index 0."
                },
                "descWithTags": "Returns the index of the first occurrence of a value in an array."
            },
            "lastIndexOf": {
                "name": "lastIndexOf",
                "required": true,
                "description": "Returns the index of the last occurrence of a specified value in an array.\n@param searchElement The value to locate in the array.\n@param fromIndex The array index at which to begin the search. If fromIndex is omitted, the search starts at the last index in the array.",
                "defaultValue": null,
                "type": {
                    "name": "(searchElement: T, fromIndex?: number) => number"
                },
                "tags": {
                    "param": "searchElement The value to locate in the array.\nfromIndex The array index at which to begin the search. If fromIndex is omitted, the search starts at the last index in the array."
                },
                "descWithTags": "Returns the index of the last occurrence of a specified value in an array."
            },
            "every": {
                "name": "every",
                "required": true,
                "description": "Determines whether all the members of an array satisfy the specified test.\n@param callbackfn A function that accepts up to three arguments. The every method calls\rthe callbackfn function for each element in the array until the callbackfn returns a value\rwhich is coercible to the Boolean value false, or until the end of the array.\n@param thisArg An object to which the this keyword can refer in the callbackfn function.\rIf thisArg is omitted, undefined is used as the this value.",
                "defaultValue": null,
                "type": {
                    "name": "(callbackfn: (value: T, index: number, array: readonly T[]) => unknown, thisArg?: any) => boolean"
                },
                "tags": {
                    "param": "callbackfn A function that accepts up to three arguments. The every method calls\rthe callbackfn function for each element in the array until the callbackfn returns a value\rwhich is coercible to the Boolean value false, or until the end of the array.\nthisArg An object to which the this keyword can refer in the callbackfn function.\rIf thisArg is omitted, undefined is used as the this value."
                },
                "descWithTags": "Determines whether all the members of an array satisfy the specified test."
            },
            "some": {
                "name": "some",
                "required": true,
                "description": "Determines whether the specified callback function returns true for any element of an array.\n@param callbackfn A function that accepts up to three arguments. The some method calls\rthe callbackfn function for each element in the array until the callbackfn returns a value\rwhich is coercible to the Boolean value true, or until the end of the array.\n@param thisArg An object to which the this keyword can refer in the callbackfn function.\rIf thisArg is omitted, undefined is used as the this value.",
                "defaultValue": null,
                "type": {
                    "name": "(callbackfn: (value: T, index: number, array: readonly T[]) => unknown, thisArg?: any) => boolean"
                },
                "tags": {
                    "param": "callbackfn A function that accepts up to three arguments. The some method calls\rthe callbackfn function for each element in the array until the callbackfn returns a value\rwhich is coercible to the Boolean value true, or until the end of the array.\nthisArg An object to which the this keyword can refer in the callbackfn function.\rIf thisArg is omitted, undefined is used as the this value."
                },
                "descWithTags": "Determines whether the specified callback function returns true for any element of an array."
            },
            "forEach": {
                "name": "forEach",
                "required": true,
                "description": "Performs the specified action for each element in an array.\n@param callbackfn A function that accepts up to three arguments. forEach calls the callbackfn function one time for each element in the array.\n@param thisArg An object to which the this keyword can refer in the callbackfn function. If thisArg is omitted, undefined is used as the this value.",
                "defaultValue": null,
                "type": {
                    "name": "(callbackfn: (value: T, index: number, array: readonly T[]) => void, thisArg?: any) => void"
                },
                "tags": {
                    "param": "callbackfn A function that accepts up to three arguments. forEach calls the callbackfn function one time for each element in the array.\nthisArg An object to which the this keyword can refer in the callbackfn function. If thisArg is omitted, undefined is used as the this value."
                },
                "descWithTags": "Performs the specified action for each element in an array."
            },
            "map": {
                "name": "map",
                "required": true,
                "description": "Calls a defined callback function on each element of an array, and returns an array that contains the results.\n@param callbackfn A function that accepts up to three arguments. The map method calls the callbackfn function one time for each element in the array.\n@param thisArg An object to which the this keyword can refer in the callbackfn function. If thisArg is omitted, undefined is used as the this value.",
                "defaultValue": null,
                "type": {
                    "name": "<U>(callbackfn: (value: T, index: number, array: readonly T[]) => U, thisArg?: any) => U[]"
                },
                "tags": {
                    "param": "callbackfn A function that accepts up to three arguments. The map method calls the callbackfn function one time for each element in the array.\nthisArg An object to which the this keyword can refer in the callbackfn function. If thisArg is omitted, undefined is used as the this value."
                },
                "descWithTags": "Calls a defined callback function on each element of an array, and returns an array that contains the results."
            },
            "filter": {
                "name": "filter",
                "required": true,
                "description": "Returns the elements of an array that meet the condition specified in a callback function.\nReturns the elements of an array that meet the condition specified in a callback function.\n@param callbackfn A function that accepts up to three arguments. The filter method calls the callbackfn function one time for each element in the array.\n@param thisArg An object to which the this keyword can refer in the callbackfn function. If thisArg is omitted, undefined is used as the this value.\n@param callbackfn A function that accepts up to three arguments. The filter method calls the callbackfn function one time for each element in the array.\n@param thisArg An object to which the this keyword can refer in the callbackfn function. If thisArg is omitted, undefined is used as the this value.",
                "defaultValue": null,
                "type": {
                    "name": "{ <S extends T>(callbackfn: (value: T, index: number, array: readonly T[]) => value is S, thisArg?: any): S[]; (callbackfn: (value: T, index: number, array: readonly T[]) => unknown, thisArg?: any): T[]; }"
                },
                "tags": {
                    "param": "callbackfn A function that accepts up to three arguments. The filter method calls the callbackfn function one time for each element in the array.\nthisArg An object to which the this keyword can refer in the callbackfn function. If thisArg is omitted, undefined is used as the this value.\ncallbackfn A function that accepts up to three arguments. The filter method calls the callbackfn function one time for each element in the array.\nthisArg An object to which the this keyword can refer in the callbackfn function. If thisArg is omitted, undefined is used as the this value."
                },
                "descWithTags": "Returns the elements of an array that meet the condition specified in a callback function.\nReturns the elements of an array that meet the condition specified in a callback function."
            },
            "reduce": {
                "name": "reduce",
                "required": true,
                "description": "Calls the specified callback function for all the elements in an array. The return value of the callback function is the accumulated result, and is provided as an argument in the next call to the callback function.\nCalls the specified callback function for all the elements in an array. The return value of the callback function is the accumulated result, and is provided as an argument in the next call to the callback function.\n@param callbackfn A function that accepts up to four arguments. The reduce method calls the callbackfn function one time for each element in the array.\n@param initialValue If initialValue is specified, it is used as the initial value to start the accumulation. The first call to the callbackfn function provides this value as an argument instead of an array value.\n@param callbackfn A function that accepts up to four arguments. The reduce method calls the callbackfn function one time for each element in the array.\n@param initialValue If initialValue is specified, it is used as the initial value to start the accumulation. The first call to the callbackfn function provides this value as an argument instead of an array value.",
                "defaultValue": null,
                "type": {
                    "name": "{ (callbackfn: (previousValue: T, currentValue: T, currentIndex: number, array: readonly T[]) => T): T; (callbackfn: (previousValue: T, currentValue: T, currentIndex: number, array: readonly T[]) => T, initialValue: T): T; <U>(callbackfn: (previousValue: U, currentValue: T, currentIndex: number, array: readonly T[])..."
                },
                "tags": {
                    "param": "callbackfn A function that accepts up to four arguments. The reduce method calls the callbackfn function one time for each element in the array.\ninitialValue If initialValue is specified, it is used as the initial value to start the accumulation. The first call to the callbackfn function provides this value as an argument instead of an array value.\ncallbackfn A function that accepts up to four arguments. The reduce method calls the callbackfn function one time for each element in the array.\ninitialValue If initialValue is specified, it is used as the initial value to start the accumulation. The first call to the callbackfn function provides this value as an argument instead of an array value."
                },
                "descWithTags": "Calls the specified callback function for all the elements in an array. The return value of the callback function is the accumulated result, and is provided as an argument in the next call to the callback function.\nCalls the specified callback function for all the elements in an array. The return value of the callback function is the accumulated result, and is provided as an argument in the next call to the callback function."
            },
            "reduceRight": {
                "name": "reduceRight",
                "required": true,
                "description": "Calls the specified callback function for all the elements in an array, in descending order. The return value of the callback function is the accumulated result, and is provided as an argument in the next call to the callback function.\nCalls the specified callback function for all the elements in an array, in descending order. The return value of the callback function is the accumulated result, and is provided as an argument in the next call to the callback function.\n@param callbackfn A function that accepts up to four arguments. The reduceRight method calls the callbackfn function one time for each element in the array.\n@param initialValue If initialValue is specified, it is used as the initial value to start the accumulation. The first call to the callbackfn function provides this value as an argument instead of an array value.\n@param callbackfn A function that accepts up to four arguments. The reduceRight method calls the callbackfn function one time for each element in the array.\n@param initialValue If initialValue is specified, it is used as the initial value to start the accumulation. The first call to the callbackfn function provides this value as an argument instead of an array value.",
                "defaultValue": null,
                "type": {
                    "name": "{ (callbackfn: (previousValue: T, currentValue: T, currentIndex: number, array: readonly T[]) => T): T; (callbackfn: (previousValue: T, currentValue: T, currentIndex: number, array: readonly T[]) => T, initialValue: T): T; <U>(callbackfn: (previousValue: U, currentValue: T, currentIndex: number, array: readonly T[])..."
                },
                "tags": {
                    "param": "callbackfn A function that accepts up to four arguments. The reduceRight method calls the callbackfn function one time for each element in the array.\ninitialValue If initialValue is specified, it is used as the initial value to start the accumulation. The first call to the callbackfn function provides this value as an argument instead of an array value.\ncallbackfn A function that accepts up to four arguments. The reduceRight method calls the callbackfn function one time for each element in the array.\ninitialValue If initialValue is specified, it is used as the initial value to start the accumulation. The first call to the callbackfn function provides this value as an argument instead of an array value."
                },
                "descWithTags": "Calls the specified callback function for all the elements in an array, in descending order. The return value of the callback function is the accumulated result, and is provided as an argument in the next call to the callback function.\nCalls the specified callback function for all the elements in an array, in descending order. The return value of the callback function is the accumulated result, and is provided as an argument in the next call to the callback function."
            },
            "__index": {
                "name": "__index",
                "required": true,
                "description": "",
                "defaultValue": null,
                "type": {
                    "name": "any"
                },
                "tags": {},
                "descWithTags": ""
            },
            "find": {
                "name": "find",
                "required": true,
                "description": "Returns the value of the first element in the array where predicate is true, and undefined\notherwise.\n@param predicate find calls predicate once for each element of the array, in ascending\rorder, until it finds one where predicate returns true. If such an element is found, find\rimmediately returns that element value. Otherwise, find returns undefined.\n@param thisArg If provided, it will be used as the this value for each invocation of\rpredicate. If it is not provided, undefined is used instead.",
                "defaultValue": null,
                "type": {
                    "name": "{ <S extends T>(predicate: (this: void, value: T, index: number, obj: readonly T[]) => value is S, thisArg?: any): S; (predicate: (value: T, index: number, obj: readonly T[]) => unknown, thisArg?: any): T; }"
                },
                "tags": {
                    "param": "predicate find calls predicate once for each element of the array, in ascending\rorder, until it finds one where predicate returns true. If such an element is found, find\rimmediately returns that element value. Otherwise, find returns undefined.\nthisArg If provided, it will be used as the this value for each invocation of\rpredicate. If it is not provided, undefined is used instead."
                },
                "descWithTags": "Returns the value of the first element in the array where predicate is true, and undefined\notherwise."
            },
            "findIndex": {
                "name": "findIndex",
                "required": true,
                "description": "Returns the index of the first element in the array where predicate is true, and -1\notherwise.\n@param predicate find calls predicate once for each element of the array, in ascending\rorder, until it finds one where predicate returns true. If such an element is found,\rfindIndex immediately returns that element index. Otherwise, findIndex returns -1.\n@param thisArg If provided, it will be used as the this value for each invocation of\rpredicate. If it is not provided, undefined is used instead.",
                "defaultValue": null,
                "type": {
                    "name": "(predicate: (value: T, index: number, obj: readonly T[]) => unknown, thisArg?: any) => number"
                },
                "tags": {
                    "param": "predicate find calls predicate once for each element of the array, in ascending\rorder, until it finds one where predicate returns true. If such an element is found,\rfindIndex immediately returns that element index. Otherwise, findIndex returns -1.\nthisArg If provided, it will be used as the this value for each invocation of\rpredicate. If it is not provided, undefined is used instead."
                },
                "descWithTags": "Returns the index of the first element in the array where predicate is true, and -1\notherwise."
            },
            "__@iterator": {
                "name": "__@iterator",
                "required": true,
                "description": "Iterator of values in the array.",
                "defaultValue": null,
                "type": {
                    "name": "() => IterableIterator<T>"
                },
                "tags": {},
                "descWithTags": "Iterator of values in the array."
            },
            "entries": {
                "name": "entries",
                "required": true,
                "description": "Returns an iterable of key, value pairs for every entry in the array",
                "defaultValue": null,
                "type": {
                    "name": "() => IterableIterator<[number, T]>"
                },
                "tags": {},
                "descWithTags": "Returns an iterable of key, value pairs for every entry in the array"
            },
            "keys": {
                "name": "keys",
                "required": true,
                "description": "Returns an iterable of keys in the array",
                "defaultValue": null,
                "type": {
                    "name": "() => IterableIterator<number>"
                },
                "tags": {},
                "descWithTags": "Returns an iterable of keys in the array"
            },
            "values": {
                "name": "values",
                "required": true,
                "description": "Returns an iterable of values in the array",
                "defaultValue": null,
                "type": {
                    "name": "() => IterableIterator<T>"
                },
                "tags": {},
                "descWithTags": "Returns an iterable of values in the array"
            },
            "includes": {
                "name": "includes",
                "required": true,
                "description": "Determines whether an array includes a certain element, returning true or false as appropriate.\n@param searchElement The element to search for.\n@param fromIndex The position in this array at which to begin searching for searchElement.",
                "defaultValue": null,
                "type": {
                    "name": "(searchElement: T, fromIndex?: number) => boolean"
                },
                "tags": {
                    "param": "searchElement The element to search for.\nfromIndex The position in this array at which to begin searching for searchElement."
                },
                "descWithTags": "Determines whether an array includes a certain element, returning true or false as appropriate."
            },
            "flatMap": {
                "name": "flatMap",
                "required": true,
                "description": "Calls a defined callback function on each element of an array. Then, flattens the result into\na new array.\r\nThis is identical to a map followed by flat with depth 1.\n@param callback A function that accepts up to three arguments. The flatMap method calls the\rcallback function one time for each element in the array.\n@param thisArg An object to which the this keyword can refer in the callback function. If\rthisArg is omitted, undefined is used as the this value.",
                "defaultValue": null,
                "type": {
                    "name": "<U, This = undefined>(callback: (this: This, value: T, index: number, array: T[]) => U | readonly U[], thisArg?: This) => U[]"
                },
                "tags": {
                    "param": "callback A function that accepts up to three arguments. The flatMap method calls the\rcallback function one time for each element in the array.\nthisArg An object to which the this keyword can refer in the callback function. If\rthisArg is omitted, undefined is used as the this value."
                },
                "descWithTags": "Calls a defined callback function on each element of an array. Then, flattens the result into\na new array.\r\nThis is identical to a map followed by flat with depth 1."
            },
            "flat": {
                "name": "flat",
                "required": true,
                "description": "Returns a new array with all sub-array elements concatenated into it recursively up to the\nspecified depth.\n@param depth The maximum recursion depth",
                "defaultValue": null,
                "type": {
                    "name": "<A, D extends number = 1>(this: A, depth?: D) => FlatArray<A, D>[]"
                },
                "tags": {
                    "param": "depth The maximum recursion depth"
                },
                "descWithTags": "Returns a new array with all sub-array elements concatenated into it recursively up to the\nspecified depth."
            }
        }
    },
    "depComps": {},
    "typeNameInfo": {
        "props": "PickerProps",
        "ref": "PickerRef"
    },
    "isDefaultExport": true
}