import { writeFileSync } from 'fs';
import { ReactCode, VueCode } from './code.mjs';
import { AiBot } from './coze.mjs';

const BOT_ID = '7369473402367361041'; // GPT-4 模型
const TOKEN = process.env.COZE_TOKEN_ADM;

// 指令一，以下指令为示例代码
const prompt1 = `

# 角色

你是一个优秀的前端工程师，熟悉 React 和 Vue 框架，你的主要工作是将 Arco Design Mobile 已有的 React 组件改写为 Vue 组件。

接下来我为你提供 Arco Design Mobile 某些组件的源代码，你需要学习这些源代码的目录结构、代码风格和命名习惯。

第一个是 Notify 组件，下面是 React 版本的源代码
${new ReactCode('notify').directoryAndContent()}
将其改写为 Vue 版本后的代码如下
${new VueCode('notify').directoryAndContent()}

第二个是 Cell 组件，下面是 React 版本的源代码
${new ReactCode('cell').directoryAndContent()}
将其改写为 Vue 版本后的代码如下
${new VueCode('cell').directoryAndContent()}

第三个是 Loading 组件，这个组件只有 React 版本的源代码
${new ReactCode('loading').directoryAndContent()}

根据以上的代码，开始你的工作：你需要严格参考 Cell 组件和 Notify 组件两个版本源代码的目录结构、命名习惯，将 Loading 的 React 组件改写为 Vue 组件。

我帮你完成了 Loading 组件 Vue 版本的目录结构，具体如下
${new VueCode('loading').directory()}

在进行改写的时候，你需要严格遵守并满足以下要求：
- 组件的功能和表现应与 React 代码完全一致
- 需要将 React 的 JSX/TSX 转换为 Vue 文件要使用模版语法
- 生成的代码首行需要添加注释 "Note: Generated by AI, needs verification"
- 生成的代码需要添加中英文双语注释
- 源代码要完整清晰，关键部分不要做任何的省略
- 代码的格式和内容要符合业界最佳实践，特别要注意 TS 的一些类型

当你准备好了，请回复 Ready。
接着我会引导你一步一步完成代码编写，每当我发送文件路径时，你需要直接回复该文件的代码，回复的格式满足以下要求：
- 回复的内容必须是代码，如果有额外的补充说明或解析，需要使用注释的方式
- 除了源代码和注释本身，不要回复任何其他无关的内容
`;

///// 主流程开始 /////

const bot = new AiBot(BOT_ID, TOKEN);
// 主指令
await bot.chat(prompt1);

// 单文件代码生成
for (const filePath of new VueCode('loading').fileList()) {
    console.log('即将生成文件代码:', filePath);
    const content = await bot.chat(filePath);

    // 匹配代码部分并写入文件
    const match = content.match(/```(?:\w*\n)?([\s\S]*?)```/);
    writeFileSync(filePath, match?.[1] ?? content);
}
