import { SourceCode } from './code.mjs';
import { AiBot } from './coze.mjs';

const BOT_ID = '7369473402367361041'; // GPT-4 模型
const TOKEN = process.env.COZE_TOKEN_ADM;

const code = new SourceCode();

// 一个游戏，测试 AI 上下文能力
const prompt_game = `
现在我们玩一个游戏：

当我发送一个数字，你应该将这个数字+1，并将结果发给我。
当我发送 "Next"，你应该继续+1，并将结果发给我。
当再次接收到数字后，游戏重新开始。

严格按照游戏规则回复，不要回复其他内容。

首先我给你一个数字是 1

`;

// 指令一
const prompt1 = `

你是一个优秀的前端工程师，关注于编写 Arco Design Mobile 代码，熟悉 React 和 Vue 框架，擅长将 React 代码改写为 Vue 代码。

当你将 React 代码改写为 Vue 代码时，你会严格遵守如下要求：
- 组件的功能和表现应与 React 代码完全一致
- 需要将 React 的 JSX/TSX 转换为 Vue 文件要使用模版语法
- 生成的代码代码的首行需要添加注释 "Note: Generated by AI, needs verification"
- 生成的代码需要添加中英文双语注释
- 代码风格和命名习惯需要参考 Cell 组件和 Notify 组件的源代码

接下来我为你提供一些示例，你会学习这两个示例的源代码、目录结构、代码风格和命名习惯。

第一个是 Notify 组件示例，下面是 React 版本的源代码
${code.getCodeContent('packages/arcodesign/components/notify/', /.(ts|tsx|js|jsx|less)$/)}
将其转换为 Vue 版本后的代码如下
${code.getCodeContent('packages/arcodesign-vue/components/notify/', /.(vue|ts|js|less)$/)}

第二个是 Cell 组件的示例，下面是 React 版本的源代码
${code.getCodeContent('packages/arcodesign/components/cell/', /.(ts|tsx|js|jsx|less)$/)}
将其转换为 Vue 版本后的代码如下
${code.getCodeContent('packages/arcodesign-vue/components/cell/', /.(vue|ts|js|less)$/)}

下面你将开始自己的工作，我为你提供一个全新的组件，这个组件名为 Loading ，组件的 React 源代码为
${code.getCodeContent('packages/arcodesign/components/cell/', /.(ts|tsx|js|jsx|less)$/)}

你需要严格按照 Cell 组件和 Notify 组件的两个版本的代码的代码风格、目录结构、命名习惯，来进行 Loading 组件 vue 版本代码的编写。

当你准备好了，请回复 Ready。
当我发送 Start，你需要告诉我 Loading 组件的目录结构和所有源代码文件名称，请注意需要回复完整的文件名称，包括文件路径。除了文件路径外，不要回答任何其他语句。
当我发送一个文件路径，你需要完成这个文件的代码编写，记住你需要回复这个文件的完整源代码，不要做任何的省略，其代码风格和命名习惯要严格参考 Cell 组件和 Notify 组件，要和 React 版本功能完全一致。

`;

///// 主流程开始 /////
const bot = new AiBot(BOT_ID, TOKEN);

await bot.chat(prompt1);
await bot.chat('Start');
await bot.chat('packages/arcodesign-vue/components/loading/Loading.vue');
